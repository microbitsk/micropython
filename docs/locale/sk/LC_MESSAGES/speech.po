msgid ""
msgstr ""
"Project-Id-Version: bbc-microbit-micropython\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-03-25 09:53+0200\n"
"PO-Revision-Date: 2018-05-04 07:33-0400\n"
"Last-Translator: RicCo386 <richard.kellner@pycon.sk>\n"
"Language-Team: Slovak\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"
"Plural-Forms: nplurals=4; plural=(n==1) ? 0 : (n>=2 && n<=4) ? 1 : 3;\n"
"X-Generator: crowdin.com\n"
"X-Crowdin-Project: bbc-microbit-micropython\n"
"X-Crowdin-Language: sk\n"
"X-Crowdin-File: /master/docs/locale/sk/LC_MESSAGES/speech.po\n"
"Language: sk_SK\n"

#: ../../speech.rst:2
msgid "Speech"
msgstr ""

#: ../../speech.rst:6
msgid "WARNING! THIS IS ALPHA CODE."
msgstr ""

#: ../../speech.rst:8
msgid "We reserve the right to change this API as development continues."
msgstr ""

#: ../../speech.rst:10
msgid "The quality of the speech is not great, merely \"good enough\". Given the constraints of the device you may encounter memory errors and / or unexpected extra sounds during playback. It's early days and we're improving the code for the speech synthesiser all the time. Bug reports and pull requests are most welcome."
msgstr ""

#: ../../speech.rst:18
msgid "This module makes microbit talk, sing and make other speech like sounds provided that you connect a speaker to your board as shown below:"
msgstr ""

#: ../../speech.rst:25
msgid "This work is based upon the amazing reverse engineering efforts of Sebastian Macke based upon an old text-to-speech (TTS) program called SAM (Software Automated Mouth) originally released in 1982 for the Commodore 64. The result is a small C library that we have adopted and adapted for the micro:bit. You can find out more from `his homepage <http://simulationcorner.net/index.php?page=sam>`_. Much of the information in this document was gleaned from the original user's manual which can be found `here <http://www.apple-iigs.info/newdoc/sam.pdf>`_."
msgstr ""

#: ../../speech.rst:35
msgid "The speech synthesiser can produce around 2.5 seconds worth of sound from up to 255 characters of textual input."
msgstr ""

#: ../../speech.rst:38
msgid "To access this module you need to::"
msgstr ""

#: ../../speech.rst:42
msgid "We assume you have done this for the examples below."
msgstr ""

#: ../../speech.rst:45
msgid "Functions"
msgstr ""

#: ../../speech.rst:49
msgid "Given English words in the string ``words``, return a string containing a best guess at the appropriate phonemes to pronounce. The output is generated from this `text to phoneme translation table <https://github.com/s-macke/SAM/wiki/Text-to-phoneme-translation-table>`_."
msgstr ""

#: ../../speech.rst:54
msgid "This function should be used to generate a first approximation of phonemes that can be further hand-edited to improve accuracy, inflection and emphasis."
msgstr ""

#: ../../speech.rst:60
msgid "Pronounce the phonemes in the string ``phonemes``. See below for details of how to use phonemes to finely control the output of the speech synthesiser. Override the optional pitch, speed, mouth and throat settings to change the timbre (quality) of the voice."
msgstr ""

#: ../../speech.rst:67
msgid "Say the English words in the string ``words``. The result is semi-accurate for English. Override the optional pitch, speed, mouth and throat settings to change the timbre (quality) of the voice. This is a short-hand equivalent of: ``speech.pronounce(speech.translate(words))``"
msgstr ""

#: ../../speech.rst:74
msgid "Sing the phonemes contained in the string ``phonemes``. Changing the pitch and duration of the note is described below. Override the optional pitch, speed, mouth and throat settings to change the timbre (quality) of the voice."
msgstr ""

#: ../../speech.rst:80
msgid "Punctuation"
msgstr ""

#: ../../speech.rst:82
msgid "Punctuation is used to alter the delivery of speech. The synthesiser understands four punctuation marks: hyphen, comma, full-stop and question mark."
msgstr ""

#: ../../speech.rst:85
msgid "The hyphen (``-``) marks clause boundaries by inserting a short pause in the speech."
msgstr ""

#: ../../speech.rst:88
msgid "The comma (``,``) marks phrase boundaries and inserts a pause of approximately double that of the hyphen."
msgstr ""

#: ../../speech.rst:91
msgid "The full-stop (``.``) and question mark (``?``) end sentences."
msgstr ""

#: ../../speech.rst:93
msgid "The full-stop inserts a pause and causes the pitch to fall."
msgstr ""

#: ../../speech.rst:95
msgid "The question mark also inserts a pause but causes the pitch to rise. This works well with yes/no questions such as, \"are we home yet?\" rather than more complex questions such as \"why are we going home?\". In the latter case, use a full-stop."
msgstr ""

#: ../../speech.rst:101
msgid "Timbre"
msgstr ""

#: ../../speech.rst:103
msgid "The timbre of a sound is the quality of the sound. It's the difference between the voice of a DALEK and the voice of a human (for example). To control the timbre change the numeric settings of the ``pitch``, ``speed``, ``mouth`` and ``throat`` arguments."
msgstr ""

#: ../../speech.rst:108
msgid "The pitch (how high or low the voice sounds) and speed (how quickly the speech is delivered) settings are rather obvious and generally fall into the following categories:"
msgstr ""

#: ../../speech.rst:112
msgid "Pitch:"
msgstr ""

#: ../../speech.rst:114 ../../speech.rst:127
msgid "0-20 impractical"
msgstr ""

#: ../../speech.rst:115
msgid "20-30 very high"
msgstr ""

#: ../../speech.rst:116
msgid "30-40 high"
msgstr ""

#: ../../speech.rst:117
msgid "40-50 high normal"
msgstr ""

#: ../../speech.rst:118
msgid "50-70 normal"
msgstr ""

#: ../../speech.rst:119
msgid "70-80 low normal"
msgstr ""

#: ../../speech.rst:120
msgid "80-90 low"
msgstr ""

#: ../../speech.rst:121
msgid "90-255 very low"
msgstr ""

#: ../../speech.rst:123
msgid "(The default is 64)"
msgstr ""

#: ../../speech.rst:125
msgid "Speed:"
msgstr ""

#: ../../speech.rst:128
msgid "20-40 very fast"
msgstr ""

#: ../../speech.rst:129
msgid "40-60 fast"
msgstr ""

#: ../../speech.rst:130
msgid "60-70 fast conversational"
msgstr ""

#: ../../speech.rst:131
msgid "70-75 normal conversational"
msgstr ""

#: ../../speech.rst:132
msgid "75-90 narrative"
msgstr ""

#: ../../speech.rst:133
msgid "90-100 slow"
msgstr ""

#: ../../speech.rst:134
msgid "100-225 very slow"
msgstr ""

#: ../../speech.rst:136
msgid "(The default is 72)"
msgstr ""

#: ../../speech.rst:138
msgid "The mouth and throat values are a little harder to explain and the following descriptions are based upon our aural impressions of speech produced as the value of each setting is changed."
msgstr ""

#: ../../speech.rst:142
msgid "For mouth, the lower the number the more it sounds like the speaker is talking without moving their lips. In contrast, higher numbers (up to 255) make it sound like the speech is enunciated with exagerated mouth movement."
msgstr ""

#: ../../speech.rst:146
msgid "For throat, the lower the number the more relaxed the speaker sounds. In contrast, the higher the number, the more tense the tone of voice becomes."
msgstr ""

#: ../../speech.rst:149
msgid "The important thing is to experiment and adjust the settings until you get the effect you desire."
msgstr ""

#: ../../speech.rst:152
msgid "To get you started here are some examples::"
msgstr ""

#: ../../speech.rst:162
msgid "Phonemes"
msgstr ""

#: ../../speech.rst:164
msgid "The ``say`` function makes it easy to produce speech - but often it's not accurate. To make sure the speech synthesiser pronounces things *exactly* how you'd like, you need to use phonemes: the smallest perceptually distinct units of sound that can be used to distinguish different words. Essentially, they are the building-block sounds of speech."
msgstr ""

#: ../../speech.rst:170
msgid "The ``pronounce`` function takes a string containing a simplified and readable version of the `International Phonetic Alphabet <https://en.wikipedia.org/wiki/International_Phonetic_Alphabet>`_ and optional annotations to indicate inflection and emphasis."
msgstr ""

#: ../../speech.rst:174
msgid "The advantage of using phonemes is that you don't have to know how to spell! Rather, you only have to know how to say the word in order to spell it phonetically."
msgstr ""

#: ../../speech.rst:178
msgid "The table below lists the phonemes understood by the synthesiser."
msgstr ""

#: ../../speech.rst:182
msgid "The table contains the phoneme as characters, and an example word. The example words have the sound of the phoneme (in parenthesis), but not necessarily the same letters."
msgstr ""

#: ../../speech.rst:186
msgid "Often overlooked: the symbol for the \"H\" sound is ``/H``. A glottal stop is a forced stoppage of sound."
msgstr ""

#: ../../speech.rst:221
msgid "The following non-standard symbols are also available to the user::"
msgstr ""

#: ../../speech.rst:230
msgid "Here are some seldom used phoneme combinations (and suggested alternatives)::"
msgstr ""

#: ../../speech.rst:243
msgid "If you use anything other than the phonemes described above, a ``ValueError`` exception will be raised. Pass in the phonemes as a string like this::"
msgstr ""

#: ../../speech.rst:248
msgid "The phonemes are classified into two broad groups: vowels and consonants."
msgstr ""

#: ../../speech.rst:250
msgid "Vowels are further subdivided into simple vowels and diphthongs. Simple vowels don't change their sound as you say them whereas diphthongs start with one sound and end with another. For example, when you say the word \"oil\" the \"oi\" vowel starts with an \"oh\" sound but changes to an \"ee\" sound."
msgstr ""

#: ../../speech.rst:255
msgid "Consonants are also subdivided into two groups: voiced and unvoiced. Voiced consonants require the speaker to use their vocal chords to produce the sound. For example, consonants like \"L\", \"N\" and \"Z\" are voiced. Unvoiced consonants are produced by rushing air, such as \"P\", \"T\" and \"SH\"."
msgstr ""

#: ../../speech.rst:260
msgid "Once you get used to it, the phoneme system is easy. To begin with some spellings may seem tricky (for example, \"adventure\" has a \"CH\" in it) but the rule is to write what you say, not what you spell. Experimentation is the best way to resolve problematic words."
msgstr ""

#: ../../speech.rst:265
msgid "It's also important that speech sounds natural and understandable. To help with improving the quality of spoken output it's often good to use the built-in stress system to add inflection or emphasis."
msgstr ""

#: ../../speech.rst:269
msgid "There are eight stress markers indicated by the numbers ``1`` - ``8``. Simply insert the required number after the vowel to be stressed. For example, the lack of expression of \"/HEHLOW\" is much improved (and friendlier) when spelled out \"/HEH3LOW\"."
msgstr ""

#: ../../speech.rst:274
msgid "It's also possible to change the meaning of words through the way they are stressed. Consider the phrase \"Why should I walk to the store?\". It could be pronounced in several different ways::"
msgstr ""

#: ../../speech.rst:289
msgid "Put simply, different stresses in the speech create a more expressive tone of voice."
msgstr ""

#: ../../speech.rst:292
msgid "They work by raising or lowering pitch and elongating the associated vowel sound depending on the number you give:"
msgstr ""

#: ../../speech.rst:295
msgid "very emotional stress"
msgstr ""

#: ../../speech.rst:296
msgid "very emphatic stress"
msgstr ""

#: ../../speech.rst:297
msgid "rather strong stress"
msgstr ""

#: ../../speech.rst:298
msgid "ordinary stress"
msgstr ""

#: ../../speech.rst:299
msgid "tight stress"
msgstr ""

#: ../../speech.rst:300
msgid "neutral (no pitch change) stress"
msgstr ""

#: ../../speech.rst:301
msgid "pitch-dropping stress"
msgstr ""

#: ../../speech.rst:302
msgid "extreme pitch-dropping stress"
msgstr ""

#: ../../speech.rst:304
msgid "The smaller the number, the more extreme the emphasis will be. However, such stress markers will help pronounce difficult words correctly. For example, if a syllable is not enunciated sufficiently, put in a neutral stress marker."
msgstr ""

#: ../../speech.rst:308
msgid "It's also possible to elongate words with stress markers::"
msgstr ""

#: ../../speech.rst:313
msgid "Singing"
msgstr ""

#: ../../speech.rst:315
msgid "It's possible to make MicroPython sing phonemes."
msgstr ""

#: ../../speech.rst:317
msgid "This is done by annotating a pitch related number onto a phoneme. The lower the number, the higher the pitch. Numbers roughly translate into musical notes as shown in the diagram below:"
msgstr ""

#: ../../speech.rst:323
msgid "Annotations work by pre-pending a hash (``#``) sign and the pitch number in front of the phoneme. The pitch will remain the same until a new annotation is given. For example, make MicroPython sing a scale like this::"
msgstr ""

#: ../../speech.rst:340
msgid "In order to sing a note for a certain duration extend the note by repeating vowel or voiced consonant phonemes (as demonstrated in the example above). Beware diphthongs - to extend them you need to break them into their component parts. For example, \"OY\" can be extended with \"OHOHIYIYIY\"."
msgstr ""

#: ../../speech.rst:346
msgid "Experimentation, listening carefully and adjusting is the only sure way to work out how many times to repeat a phoneme so the note lasts for the desired duration."
msgstr ""

#: ../../speech.rst:351
msgid "How Does it Work?"
msgstr ""

#: ../../speech.rst:353
msgid "The original manual explains it well:"
msgstr ""

#: ../../speech.rst:355
msgid "First, instead of recording the actual speech waveform, we only store the frequency spectrums. By doing this, we save memory and pick up other advantages. Second, we [...] store some data about timing. These are numbers pertaining to the duration of each phoneme under different circumstances, and also some data on transition times so we can know how to blend a phoneme into its neighbors. Third, we devise a system of rules to deal with all this data and, much to our amazement, our computer is babbling in no time."
msgstr ""

#: ../../speech.rst:374
msgid "S.A.M. owner's manual."
msgstr ""

#: ../../speech.rst:366
msgid "The output is piped through the functions provided by the ``audio`` module and, hey presto, we have a talking micro:bit."
msgstr ""

#: ../../speech.rst:370
msgid "Example"
msgstr ""

