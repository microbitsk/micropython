msgid ""
msgstr ""
"Project-Id-Version: bbc-microbit-micropython\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-03-25 09:53+0200\n"
"PO-Revision-Date: 2018-05-04 07:36-0400\n"
"Last-Translator: RicCo386 <richard.kellner@pycon.sk>\n"
"Language-Team: Slovak\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"
"Plural-Forms: nplurals=4; plural=(n==1) ? 0 : (n>=2 && n<=4) ? 1 : 3;\n"
"X-Generator: crowdin.com\n"
"X-Crowdin-Project: bbc-microbit-micropython\n"
"X-Crowdin-Language: sk\n"
"X-Crowdin-File: /master/docs/locale/sk/LC_MESSAGES/filesystem.po\n"
"Language: sk_SK\n"

#: ../../filesystem.rst:2
msgid "Local Persistent File System"
msgstr ""

#: ../../filesystem.rst:4
msgid "It is useful to store data in a persistent manner so that it remains intact between restarts of the device. On traditional computers this is often achieved by a file system consisting of named files that hold raw data, and named directories that contain files. Python supports the various operations needed to work with such file systems."
msgstr ""

#: ../../filesystem.rst:10
msgid "However, since the micro:bit is a limited device in terms of both hardware and storage capacity MicroPython provides a small subset of the functions needed to persist data on the device. Because of memory constraints **there is approximately 30k of storage available** on the file system."
msgstr ""

#: ../../filesystem.rst:17
msgid "Re-flashing the device will DESTROY YOUR DATA."
msgstr ""

#: ../../filesystem.rst:19
msgid "Since the file system is stored in the micro:bit's flash memory and flashing the device rewrites all the available flash memory then all your data will be lost if you flash your device."
msgstr ""

#: ../../filesystem.rst:23
msgid "However, if you switch your device off the data will remain intact until you either delete it (see below) or re-flash the device."
msgstr ""

#: ../../filesystem.rst:26
msgid "MicroPython on the micro:bit provides a flat file system; i.e. there is no notion of a directory hierarchy, the file system is just a list of named files. Reading and writing a file is achieved via the standard Python ``open`` function and the resulting file-like object (representing the file) of types ``TextIO`` or ``BytesIO``. Operations for working with files on the file system (for example, listing or deleting files) are contained within the :py:mod:`os` module."
msgstr ""

#: ../../filesystem.rst:34
msgid "If a file ends in the ``.py`` file extension then it can be imported. For example, a file named ``hello.py`` can be imported like this: ``import hello``."
msgstr ""

#: ../../filesystem.rst:37
msgid "An example session in the MicroPython REPL may look something like this::"
msgstr ""

#: ../../filesystem.rst:57
msgid "Returns a file object representing the file named in the argument ``filename``. The mode defaults to ``'r'`` which means open for reading in text mode. The other common mode is ``'w'`` for writing (overwriting the content of the file if it already exists). Two other modes are available to be used in conjunction with the ones describes above: ``'t'`` means text mode (for reading and writing strings) and ``'b'`` means binary mode (for reading and writing bytes). If these are not specified then ``'t'`` (text mode) is assumed. When in text mode the file object will be an instance of ``TextIO``. When in binary mode the file object will be an instance of ``BytesIO``. For example, use ``'rb'`` to read binary data from a file."
msgstr ""

#: ../../filesystem.rst:74
msgid "Instances of these classes represent files in the micro:bit's flat file system. The TextIO class is used to represent text files. The BytesIO class is used to represent binary files. They work in exactly the same except that TextIO works with strings and BytesIO works with bytes."
msgstr ""

#: ../../filesystem.rst:79
msgid "You do not directly instantiate these classes. Rather, an appropriately configured instance of the class is returned by the ``open`` function described above."
msgstr ""

#: ../../filesystem.rst:85
msgid "Flush and close the file. This method has no effect if the file is already closed. Once the file is closed, any operation on the file (e.g. reading or writing) will raise an exception."
msgstr ""

#: ../../filesystem.rst:91
msgid "Returns the name of the file the object represents. This will be the same as the ``filename`` argument passed into the call to the ``open`` function that instantiated the object."
msgstr ""

#: ../../filesystem.rst:97
msgid "Read and return at most ``size`` characters as a single string or ``size`` bytes from the file. As a convenience, if ``size`` is unspecified or -1, all the data contained in the file is returned. Fewer than ``size`` characters or bytes may be returned if there are less than ``size`` characters or bytes remaining to be read from the file."
msgstr ""

#: ../../filesystem.rst:104
msgid "If 0 characters or bytes are returned, and ``size`` was not 0, this indicates end of file."
msgstr ""

#: ../../filesystem.rst:107
msgid "A ``MemoryError`` exception will occur if ``size`` is larger than the available RAM."
msgstr ""

#: ../../filesystem.rst:112
msgid "Read characters or bytes into the buffer ``buf``. If ``n`` is supplied, read ``n`` number of bytes or characters into the buffer ``buf``."
msgstr ""

#: ../../filesystem.rst:117
msgid "Read and return one line from the file. If ``size`` is specified, at most ``size`` characters will be read."
msgstr ""

#: ../../filesystem.rst:120
msgid "The line terminator is always ``'\\n'`` for strings or ``b'\\n'`` for bytes."
msgstr ""

#: ../../filesystem.rst:125
msgid "Return ``True`` if the file supports writing. If ``False``, ``write()`` will raise ``OSError``."
msgstr ""

#: ../../filesystem.rst:130
msgid "Write the string or bytes ``buf`` to the file and return the number of characters or bytes written."
msgstr ""

