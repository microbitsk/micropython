msgid ""
msgstr ""
"Project-Id-Version: bbc-microbit-micropython\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-03-25 09:53+0200\n"
"PO-Revision-Date: 2018-05-04 08:14-0400\n"
"Last-Translator: RicCo386 <richard.kellner@pycon.sk>\n"
"Language-Team: Slovak\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"
"Plural-Forms: nplurals=4; plural=(n==1) ? 0 : (n>=2 && n<=4) ? 1 : 3;\n"
"X-Generator: crowdin.com\n"
"X-Crowdin-Project: bbc-microbit-micropython\n"
"X-Crowdin-Language: sk\n"
"X-Crowdin-File: /master/docs/locale/sk/LC_MESSAGES/pin.po\n"
"\n"
"Language: sk_SK\n"

#: ../../pin.rst:2
msgid "Input/Output Pins"
msgstr ""

#: ../../pin.rst:6
msgid "The pins are your board's way to communicate with external devices connected to it. There are 19 pins for your disposal, numbered 0-16 and 19-20. Pins 17 and 18 are not available."
msgstr ""

#: ../../pin.rst:10
msgid "For example, the script below will change the display on the micro:bit depending upon the digital reading on pin 0::"
msgstr ""

#: ../../pin.rst:24
msgid "Pin Functions"
msgstr ""

#: ../../pin.rst:28
msgid "Those pins are available as attributes on the ``microbit`` module:``microbit.pin0`` - ``microbit.pin20``."
msgstr ""

#: ../../pin.rst:32
msgid "Pin"
msgstr ""

#: ../../pin.rst:32
msgid "Type"
msgstr ""

#: ../../pin.rst:32
msgid "Function"
msgstr ""

#: ../../pin.rst:34
msgid "0"
msgstr ""

#: ../../pin.rst:34 ../../pin.rst:36 ../../pin.rst:38
msgid "Touch"
msgstr ""

#: ../../pin.rst:34
msgid "Pad 0"
msgstr ""

#: ../../pin.rst:36
msgid "1"
msgstr ""

#: ../../pin.rst:36
msgid "Pad 1"
msgstr ""

#: ../../pin.rst:38
msgid "2"
msgstr ""

#: ../../pin.rst:38
msgid "Pad 2"
msgstr ""

#: ../../pin.rst:40
msgid "3"
msgstr ""

#: ../../pin.rst:40 ../../pin.rst:42 ../../pin.rst:54
msgid "Analog"
msgstr ""

#: ../../pin.rst:40
msgid "Column 1"
msgstr ""

#: ../../pin.rst:42
msgid "4"
msgstr ""

#: ../../pin.rst:42
msgid "Column 2"
msgstr ""

#: ../../pin.rst:44
msgid "5"
msgstr ""

#: ../../pin.rst:44 ../../pin.rst:46 ../../pin.rst:48 ../../pin.rst:50
#: ../../pin.rst:52 ../../pin.rst:56 ../../pin.rst:58 ../../pin.rst:60
#: ../../pin.rst:62 ../../pin.rst:64 ../../pin.rst:66 ../../pin.rst:69
#: ../../pin.rst:71
msgid "Digital"
msgstr ""

#: ../../pin.rst:44
msgid "Button A"
msgstr ""

#: ../../pin.rst:46
msgid "6"
msgstr ""

#: ../../pin.rst:46
msgid "Row 2"
msgstr ""

#: ../../pin.rst:48
msgid "7"
msgstr ""

#: ../../pin.rst:48
msgid "Row 1"
msgstr ""

#: ../../pin.rst:50
msgid "8"
msgstr ""

#: ../../pin.rst:52
msgid "9"
msgstr ""

#: ../../pin.rst:52
msgid "Row 3"
msgstr ""

#: ../../pin.rst:54
msgid "10"
msgstr ""

#: ../../pin.rst:54
msgid "Column 3"
msgstr ""

#: ../../pin.rst:56
msgid "11"
msgstr ""

#: ../../pin.rst:56
msgid "Button B"
msgstr ""

#: ../../pin.rst:58
msgid "12"
msgstr ""

#: ../../pin.rst:60
msgid "13"
msgstr ""

#: ../../pin.rst:60
msgid "SPI MOSI"
msgstr ""

#: ../../pin.rst:62
msgid "14"
msgstr ""

#: ../../pin.rst:62
msgid "SPI MISO"
msgstr ""

#: ../../pin.rst:64
msgid "15"
msgstr ""

#: ../../pin.rst:64
msgid "SPI SCK"
msgstr ""

#: ../../pin.rst:66
msgid "16"
msgstr ""

#: ../../pin.rst:69
msgid "19"
msgstr ""

#: ../../pin.rst:69
msgid "I2C SCL"
msgstr ""

#: ../../pin.rst:71
msgid "20"
msgstr ""

#: ../../pin.rst:71
msgid "I2C SDA"
msgstr ""

#: ../../pin.rst:74
msgid "The above table summarizes the pins available, their types (see below) and what they are internally connected to."
msgstr ""

#: ../../pin.rst:79
msgid "Pulse-Width Modulation"
msgstr ""

#: ../../pin.rst:81
msgid "The pins of your board cannot output analog signal the way an audio amplifier can do it -- by modulating the voltage on the pin. Those pins can only either enable the full 3.3V output, or pull it down to 0V. However, it is still possible to control the brightness of LEDs or speed of an electric motor, by switching that voltage on and off very fast, and controlling how long it is on and how long it is off. This technique is called Pulse-Width Modulation (PWM), and that's what the ``write_analog`` method below does."
msgstr ""

#: ../../pin.rst:91
msgid "Above you can see the diagrams of three different PWM signals. All of them have the same period (and thus frequency), but they have different duty cycles."
msgstr ""

#: ../../pin.rst:94
#, python-format
msgid "The first one would be generated by ``write_analog(511)``, as it has exactly 50% duty -- the power is on half of the time, and off half of the time. The result of that is that the total energy of this signal is the same, as if it was 1.65V instead of 3.3V."
msgstr ""

#: ../../pin.rst:99
#, python-format
msgid "The second signal has 25% duty cycle, and could be generated with ``write_analog(255)``. It has similar effect as if 0.825V was being output on that pin."
msgstr ""

#: ../../pin.rst:103
#, python-format
msgid "The third signal has 75% duty cycle, and can be generated with ``write_analog(767)``. It has three times as much energy, as the second signal, and is equivalent to outputting 2.475V on th pin."
msgstr ""

#: ../../pin.rst:107
msgid "Note that this works well with devices such as motors, which have huge inertia by themselves, or LEDs, which blink too fast for the human eye to see the difference, but will not work so good with generating sound waves. This board can only generate square wave sounds on itself, which sound pretty much like the very old computer games -- mostly because those games also only could do that."
msgstr ""

#: ../../pin.rst:116
msgid "Classes"
msgstr ""

#: ../../pin.rst:118
msgid "There are three kinds of pins, differing in what is available for them. They are represented by the classes listed below. Note that they form a hierarchy, so that each class has all the functionality of the previous class, and adds its own to that."
msgstr ""

#: ../../pin.rst:124
msgid "Those classes are not actually available for the user, you can't create new instances of them. You can only use the instances already provided, representing the physical pins on your board."
msgstr ""

#: ../../pin.rst:132
msgid "Return 1 if the pin is high, and 0 if it's low."
msgstr ""

#: ../../pin.rst:136
msgid "Set the pin to high if ``value`` is 1, or to low, if it is 0."
msgstr ""

#: ../../pin.rst:148
msgid "Read the voltage applied to the pin, and return it as an integer between 0 (meaning 0V) and 1023 (meaning 3.3V)."
msgstr ""

#: ../../pin.rst:153
#, python-format
msgid "Output a PWM signal on the pin, with the duty cycle proportional to the provided ``value``. The ``value`` may be either an integer or a floating point number between 0 (0% duty cycle) and 1023 (100% duty)."
msgstr ""

#: ../../pin.rst:159
msgid "Set the period of the PWM signal being output to ``period`` in milliseconds. The minimum valid value is 1ms."
msgstr ""

#: ../../pin.rst:164
msgid "Set the period of the PWM signal being output to ``period`` in microseconds. The minimum valid value is 256Âµs."
msgstr ""

#: ../../pin.rst:172
msgid "Return ``True`` if the pin is being touched with a finger, otherwise return ``False``."
msgstr ""

#: ../../pin.rst:175
msgid "This test is done by measuring how much resistance there is between the pin and ground.  A low resistance gives a reading of ``True``.  To get a reliable reading using a finger you may need to touch the ground pin with another part of your body, for example your other hand."
msgstr ""

#: ../../pin.rst:180
msgid "The pull mode for a pin is automatically configured when the pin changes to an input mode. Input modes are when you call ``read_analog`` / ``read_digital`` / ``is_touched``. The default pull mode for these is, respectively, ``NO_PULL``, ``PULL_DOWN``, ``PULL_UP``. Calling ``set_pull`` will configure the pin to be in ``read_digital`` mode with the given pull mode."
msgstr ""

#: ../../pin.rst:188
msgid "Also note, the micro:bit has external weak (10M) pull-ups fitted on pins 0, 1 and 2 only, in order for the touch sensing to work. See the edge connector data sheet here: http://tech.microbit.org/hardware/edgeconnector_ds/"
msgstr ""

