msgid ""
msgstr ""
"Project-Id-Version: bbc-microbit-micropython\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-03-25 09:53+0200\n"
"PO-Revision-Date: 2019-08-12 16:42\n"
"Last-Translator: RicCo386\n"
"Language-Team: Slovak\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"
"Plural-Forms: nplurals=4; plural=(n==1) ? 0 : (n>=2 && n<=4) ? 1 : 3;\n"
"X-Generator: crowdin.com\n"
"X-Crowdin-Project: bbc-microbit-micropython\n"
"X-Crowdin-Language: sk\n"
"X-Crowdin-File: /master/docs/locale/sk/LC_MESSAGES/tutorials/buttons.po\n"
"Language: sk_SK\n"

#: ../../tutorials/buttons.rst:189
msgid "The image of Matrioshka dolls is licensed CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=69402"
msgstr "Obrázok matriošiek je licencovaný pod licenciou CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=69402"

#: ../../tutorials/buttons.rst:2
msgid "Buttons"
msgstr "Tlačítka"

#: ../../tutorials/buttons.rst:4
msgid "So far we have created code that makes the device do something. This is called *output*. However, we also need the device to react to things. Such things are called *inputs*."
msgstr "Zatiaľ sme vytvorili kód, ktorý hovorí zariadeniu, čo má robiť. Tomu hovoríme *výstup* (output). Niekedy ale potrebujeme, aby naše zariadenie reagovalo na podnety. Tomu hovoríme *vstupy* (input)."

#: ../../tutorials/buttons.rst:8
msgid "It's easy to remember: output is what the device puts out to the world whereas input is what goes into the device for it to process."
msgstr "Zapamätáš si to ľahko: výstup je niečo, čo ide zo zariadenia von do sveta a vstup je niečo, čo vchádza do zariadenia, ktoré to spracuje."

#: ../../tutorials/buttons.rst:11
msgid "The most obvious means of input on the micro:bit are its two buttons, labelled ``A`` and ``B``. Somehow, we need MicroPython to react to button presses."
msgstr "Asi najviac viditeľný spôsob vstupu na micro:bite sú jeho dve tlačítka, označené ako ``A`` a ``B``. Potrebovali by sme, aby MicroPython nejako reagoval, keď tlačítka stlačíme."

#: ../../tutorials/buttons.rst:14
msgid "This is remarkably simple::"
msgstr "Toto je obzvlášť jednoduché::"

#: ../../tutorials/buttons.rst:21
msgid "All this script does is sleep for ten thousand milliseconds (i.e. 10 seconds) and then scrolls the number of times you pressed button ``A``. That's it!"
msgstr "Tento skript najskôr spí desať tisíc milisekúnd (teda 10 sekúnd) a potom posúvaním zobrazí počet, koľko krát si stlačil(a) tlačítko ``A``. To je všetko!"

#: ../../tutorials/buttons.rst:24
msgid "While it's a pretty useless script, it introduces a couple of interesting new ideas:"
msgstr "Uznávam, trochu zbytočný skript, ale zoznamuje nás s niekoľkými zaujímavými novými myšlienkami:"

#: ../../tutorials/buttons.rst:27
msgid "The ``sleep`` *function* will make the micro:bit sleep for a certain number of milliseconds. If you want a pause in your program, this is how to do it. A *function* is just like a *method*, but it isn't attached by a dot to an *object*."
msgstr "*Funkcia* ``sleep`` (\"spať\") povie micro:bit, že má spať určité množstvo milisekúnd. Ak chceš mať vo svojom programe pauzu, urobíš to presne takto. *Funkcia* je presne ako *metóda*, akurát nie je spojená bodkou s *objektom*."

#: ../../tutorials/buttons.rst:31
msgid "There is an object called ``button_a`` and it allows you to get the number of times it has been pressed with the ``get_presses`` *method*."
msgstr "Ďalej máme objekt s názvom ``button_a`` (\"tlačítko A\"), ktorý nám umožňuje zistiť, koľko krát bolo stlačené pomocou *metódy* ``get_presses``."

#: ../../tutorials/buttons.rst:34
msgid "Since ``get_presses`` gives a numeric value and ``display.scroll`` only displays characters, we need to convert the numeric value into a string of characters. We do this with the ``str`` function (short for \"string\" ~ it converts things into strings of characters)."
msgstr "Keďže ``get_presses`` dáva číselnú hodnotu a ``display.scroll`` vie zobrazovať iba znaky, musíme numerickú hodnotu konvertovať (premeniť) na reťazec znakov. To urobíme pomocou funkcie ``str`` (skratka pre \"string\" = reťazec) ~ mení veci na reťazce znakov)."

#: ../../tutorials/buttons.rst:39
msgid "The third line is a bit like an onion. If the parenthesis are the onion skins then you'll notice that ``display.scroll`` contains ``str`` that itself contains ``button_a.get_presses``. Python attempts to work out the inner-most answer first before starting on the next layer out. This is called *nesting* - the coding equivalent of a Russian Matrioshka doll."
msgstr "Tretí riadok je trochu ako cibuľa. Ak by boli zátvorky šupky cibule, videli by sme, že ``display.scroll`` obsahuje ``str``, ktoré obsahuje ``button_a.get_presses``. Python sa snaží spracovať to od najhlbšie vnorenej odpovede smerom k vonkajším vrstvám. Hovoríme tomu *nesting* (\"hniezdovanie\") - programovací ekvivalent ruských matriošiek."

#: ../../tutorials/buttons.rst:47
msgid "Let's pretend you've pressed the button 10 times. Here's how Python works out what's happening on the third line:"
msgstr "Predstavme si, že si stlačil(a) tlačítko 10-krát. Takto Python spracuje to, čo sa deje na riadku tri:"

#: ../../tutorials/buttons.rst:50
msgid "Python sees the complete line and gets the value of ``get_presses``::"
msgstr "Python vidí celý riadok a získa hodnotu z``get_presses``::"

#: ../../tutorials/buttons.rst:54
msgid "Now that Python knows how many button presses there have been, it converts the numeric value into a string of characters::"
msgstr "Teraz, keď už Python vie, koľkokrát bolo tlačítko stlačené, premení číslo na reťazec znakov::"

#: ../../tutorials/buttons.rst:59
msgid "Finally, Python knows what to scroll across the display::"
msgstr "Nakoniec Python vie, čo má zobraziť a posúvať po obrazovke::"

#: ../../tutorials/buttons.rst:63
msgid "While this might seem like a lot of work, MicroPython makes this happen extraordinarily fast."
msgstr "Hoci to vyzerá ako kopec práce, MicroPython to zvládne neobyčajne rýchlo."

#: ../../tutorials/buttons.rst:67
msgid "Event Loops"
msgstr "Cykly"

#: ../../tutorials/buttons.rst:69
msgid "Often you need your program to hang around waiting for something to happen. To do this you make it loop around a piece of code that defines how to react to certain expected events such as a button press."
msgstr "Často potrebujeme, aby program len tak čakal na nejakú zaujímavú udalosť. Na to môžeš využiť slučku = opakovanie kúska kódu, ktorý hovorí o tom, akomá program reagovať v prípade špeciálnych udalostí, napríklad stlačenie tlačítka."

#: ../../tutorials/buttons.rst:73
msgid "To make loops in Python you use the ``while`` keyword. It checks if something is ``True``. If it is, it runs a *block of code* called the *body* of the loop. If it isn't, it breaks out of the loop (ignoring the body) and the rest of the program can continue."
msgstr "Na takéto cykly v Pythone používame slovo ``while`` (\"kým\"), ktoré kontroluje, či je niečo pravdivé (``True``). Ak je, spustí *blok kódu*, ktoému hovorím *telo* slučky. Ak podmienka nie je pravdivá, vyskočí zo slučky (preskočí telo) a pokračuje vo vykonávaní zvyšku programu."

#: ../../tutorials/buttons.rst:78
msgid "Python makes it easy to define blocks of code. Say I have a to-do list written on a piece of paper. It probably looks something like this::"
msgstr "V Pythone je jednoduché písať blok kódu. Povedzme, že mám zoznam úloh napísaný na papieri. Bude to vyzerať asi takto nejako::"

#: ../../tutorials/buttons.rst:85
msgid "If I wanted to break down my to-do list a bit further, I might write something like this::"
msgstr "Ak by som chcel posunúť môj zoznam úloh trochu ďalej, mohol by som napísať niečo takéto::"

#: ../../tutorials/buttons.rst:100
msgid "It's obvious that the main tasks are broken down into sub-tasks that are *indented* underneath the main task to which they are related. So ``Eggs``, ``Bacon`` and ``Tomatoes`` are obviously related to ``Shopping``. By indenting things we make it easy to see, at a glance, how the tasks relate to each other."
msgstr "Je zrejmé, že hlavné úlohy sú rozdelené do pod-úloh, ktoré sú *odsadené* pod hlavnou úlohou, ku ktorej patria. Takže ``Vajíčka``, ``Slanina`` a ``Rajčiny`` samozrejme patria ku ``Nákupu``. Odsadením vecí docielime, že je na prvý pohľad jasné, ktoré úlohy patria k sebe."

#: ../../tutorials/buttons.rst:105
msgid "This is called *nesting*. We use nesting to define blocks of code like this::"
msgstr "To sa volá *nesting* (\"hniezdovanie\"). Používame ho na definovanie blokov kódu, ako napríklad tento::"

#: ../../tutorials/buttons.rst:114
msgid "The ``running_time`` function returns the number of milliseconds since the device started."
msgstr "Funkcia ``running_time`` (čas behu) vracia počet milisekúnd od spustenia zariadenia."

#: ../../tutorials/buttons.rst:117
msgid "The ``while running_time() < 10000:`` line checks if the running time is less than 10000 milliseconds (i.e. 10 seconds). If it is, *and this is where we can see scoping in action*, then it'll display ``Image.ASLEEP``. Notice how this is indented underneath the ``while`` statement *just like in our to-do list*."
msgstr "Riadok ``while running_time() < 10000:`` kontroluje či čas behu (running time) je menej ako 10000 milisekúnd (teda 10 sekúnd). Ak je, *a toto je presne miesto, kde prichádza do akcie scoping*, potom zobrazí ospalý obrázok ``Image.ASLEEP``. Všimni si, ako je odsadný pod výrazom ``while`` *presne ako v našom zozname úloh*."

#: ../../tutorials/buttons.rst:122
msgid "Obviously, if the running time is equal to or greater than 10000 milliseconds then the display will show ``Image.SURPRISED``. Why? Because the ``while`` condition will be False (``running_time`` is no longer ``< 10000``). In that case the loop is finished and the program will continue after the ``while`` loop's block of code. It'll look like your device is asleep for 10 seconds before waking up with a surprised look on its face."
msgstr "Je jasné, že ak je čas behu rovný alebo väčší ako 10000 milisekúnd, displej zobrazí ``Image.SURPRISED`` (obrázok Prekvapený). Prečo? Lebo podmienka pre ``while`` bude nepravdivá (False), pretože ``running_time`` (čas behu) už nie je ``< 10000``. V tom prípade cyklus skončí a program bude pokračovať tam, kde končí blok kódu v cykle ``while``. Bude to vyzerať, ako keby tvoj micro:bit 10 sekúnd spal a potom sa zobudil s prekvapeným výrazom na tvári."

#: ../../tutorials/buttons.rst:129
msgid "Try it!"
msgstr "Vyskúšaj to!"

#: ../../tutorials/buttons.rst:132
msgid "Handling an Event"
msgstr "Spracovanie udalosti"

#: ../../tutorials/buttons.rst:134
msgid "If we want MicroPython to react to button press events we should put it into an infinite loop and check if the button ``is_pressed``."
msgstr "Ak chceme, aby MicroPython reagoval na stlačenia tlačítka, musíme dať kód do nekonečného cyklu (slučky) a kontrolovať, či je tlačítko stlačené (``is_pressed``)."

#: ../../tutorials/buttons.rst:137
msgid "An infinite loop is easy::"
msgstr "Urobiť nekonečný cyklus je jednoduché::"

#: ../../tutorials/buttons.rst:142
msgid "(Remember, ``while`` checks if something is ``True`` to work out if it should run its block of code. Since ``True`` is obviously ``True`` for all time, you get an infinite loop!)"
msgstr "(Nezabudni, ``while`` kontroluje či je niečo pravdivé (``True``), aby určil, či má spustiť blok kódu. Keďže Pravda (``True``) je jednoznačne vždy pravdivá, dostaneš tak nekonečný cyklus!)"

#: ../../tutorials/buttons.rst:146
msgid "Let's make a very simple cyber-pet. It's always sad unless you're pressing button ``A``. If you press button ``B`` it dies. (I realise this isn't a very pleasant game, so perhaps you can figure out how to improve it.)::"
msgstr "Urobme si veľmi jednoduché kyber zvieratko. Ak nestlačíš tlačítko A, tak je stále smutné. Ak stlačíš tlačítko B, umrie. (Uznávam, že tot nie je veľmi pekná hra, ale aspoň máš priestor na zlepšenie.)::"

#: ../../tutorials/buttons.rst:162
msgid "Can you see how we check what buttons are pressed? We used ``if``, ``elif`` (short for \"else if\") and ``else``. These are called *conditionals* and work like this::"
msgstr "Vidíš, ako kontrolujeme, ktoré tlačítka sú stlačené? Použili sme ``if`` (\"ak\"), ``elif`` (skratka pre \"else if\" = \"inak ak\") a ``else`` (\"inak\"). Hovoríme im *podmienky* a fungujú takto::"

#: ../../tutorials/buttons.rst:173
msgid "This is remarkably similar to English!"
msgstr "Toto sa vážne podobá na angličtinu!"

#: ../../tutorials/buttons.rst:175
msgid "The ``is_pressed`` method only produces two results: ``True`` or ``False``. If you're pressing the button it returns ``True``, otherwise it returns ``False``. The code above is saying, in English, \"for ever and ever, if button A is pressed then show a happy face, else if button B is pressed break out of the loop, otherwise display a sad face.\" We break out of the loop (stop the program running for ever and ever) with the ``break`` statement."
msgstr "Metóda ``is_pressed`` dáva iba dva výsledky: ``True`` (\"pravda\") alebo ``False`` (\"nepravda\"). Ak práve stláčaš tlačítko, vráti ``True``, inak vráti ``False``. Vyššie uvedený kód hovorí, po slovensky,  \"na večné veky, ak je stlačené tlačítko A, ukáž veselú tvár, inak ak je stlačené tlačítko B, vyskoč z cyklu, inak zobraz smutnú tvár.\" Z cyklu vyskočíme pomocou príkazu ``break`` (inak by program bežal na večné veky)."

#: ../../tutorials/buttons.rst:182
msgid "At the very end, when the cyber-pet is dead, we ``clear`` the display."
msgstr "Na úplnom konci, keď kyber zvieratko umrie, vyčístíme (``clear``) displej."

#: ../../tutorials/buttons.rst:184
msgid "Can you think of ways to make this game less tragic? How would you check if *both* buttons are pressed? (Hint: Python has ``and``, ``or`` and ``not`` logical operators to help check multiple truth statements (things that produce either ``True`` or ``False`` results)."
msgstr "Vieš vymyslieť nejaký spôsob, aby táto hra nekončila tak tragicky? Ako by si skontroloval(a), či sú stlačené *obidve* tlačítka? (Hint: Python má logické operátory ``and`` (\"a\"), ``or`` (\"alebo\") a ``not`` (\"nie\"), pomocou ktorých môžeš skontrolovať rôzne výrazy (veci, čo vracajú ako výsledky buď pravda alebo nepravda - ``True`` alebo ``False``)."

