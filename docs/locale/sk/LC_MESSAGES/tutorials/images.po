# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2018, Multiple authors
# This file is distributed under the same license as the BBC micro:bit
# MicroPython package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: BBC micro:bit MicroPython 0.5.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-03-25 09:53+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../tutorials/images.rst:2
msgid "Images"
msgstr ""

#: ../../tutorials/images.rst:4
msgid ""
"MicroPython is about as good at art as you can be if the only thing you "
"have is a 5x5 grid of red LEDs (light emitting diodes - the things that "
"light up on the front of the device). MicroPython gives you quite a lot "
"of control over the display so you can create all sorts of interesting "
"effects."
msgstr ""

#: ../../tutorials/images.rst:9
msgid ""
"MicroPython comes with lots of built-in pictures to show on the display. "
"For example, to make the device appear happy you type::"
msgstr ""

#: ../../tutorials/images.rst:15
msgid ""
"I suspect you can remember what the first line does. The second line uses"
" the ``display`` object to ``show`` a built-in image. The happy image we "
"want to display is a part of the ``Image`` object and called ``HAPPY``. "
"We tell ``show`` to use it by putting it between the parenthesis (``(`` "
"and ``)``)."
msgstr ""

#: ../../tutorials/images.rst:22
msgid "Here's a list of the built-in images:"
msgstr ""

#: ../../tutorials/images.rst:24
msgid "``Image.HEART``"
msgstr ""

#: ../../tutorials/images.rst:25
msgid "``Image.HEART_SMALL``"
msgstr ""

#: ../../tutorials/images.rst:26
msgid "``Image.HAPPY``"
msgstr ""

#: ../../tutorials/images.rst:27
msgid "``Image.SMILE``"
msgstr ""

#: ../../tutorials/images.rst:28
msgid "``Image.SAD``"
msgstr ""

#: ../../tutorials/images.rst:29
msgid "``Image.CONFUSED``"
msgstr ""

#: ../../tutorials/images.rst:30
msgid "``Image.ANGRY``"
msgstr ""

#: ../../tutorials/images.rst:31
msgid "``Image.ASLEEP``"
msgstr ""

#: ../../tutorials/images.rst:32
msgid "``Image.SURPRISED``"
msgstr ""

#: ../../tutorials/images.rst:33
msgid "``Image.SILLY``"
msgstr ""

#: ../../tutorials/images.rst:34
msgid "``Image.FABULOUS``"
msgstr ""

#: ../../tutorials/images.rst:35
msgid "``Image.MEH``"
msgstr ""

#: ../../tutorials/images.rst:36
msgid "``Image.YES``"
msgstr ""

#: ../../tutorials/images.rst:37
msgid "``Image.NO``"
msgstr ""

#: ../../tutorials/images.rst:38
msgid ""
"``Image.CLOCK12``, ``Image.CLOCK11``, ``Image.CLOCK10``, "
"``Image.CLOCK9``, ``Image.CLOCK8``, ``Image.CLOCK7``, ``Image.CLOCK6``, "
"``Image.CLOCK5``, ``Image.CLOCK4``, ``Image.CLOCK3``, ``Image.CLOCK2``, "
"``Image.CLOCK1``"
msgstr ""

#: ../../tutorials/images.rst:41
msgid ""
"``Image.ARROW_N``, ``Image.ARROW_NE``, ``Image.ARROW_E``, "
"``Image.ARROW_SE``, ``Image.ARROW_S``, ``Image.ARROW_SW``, "
"``Image.ARROW_W``, ``Image.ARROW_NW``"
msgstr ""

#: ../../tutorials/images.rst:44
msgid "``Image.TRIANGLE``"
msgstr ""

#: ../../tutorials/images.rst:45
msgid "``Image.TRIANGLE_LEFT``"
msgstr ""

#: ../../tutorials/images.rst:46
msgid "``Image.CHESSBOARD``"
msgstr ""

#: ../../tutorials/images.rst:47
msgid "``Image.DIAMOND``"
msgstr ""

#: ../../tutorials/images.rst:48
msgid "``Image.DIAMOND_SMALL``"
msgstr ""

#: ../../tutorials/images.rst:49
msgid "``Image.SQUARE``"
msgstr ""

#: ../../tutorials/images.rst:50
msgid "``Image.SQUARE_SMALL``"
msgstr ""

#: ../../tutorials/images.rst:51
msgid "``Image.RABBIT``"
msgstr ""

#: ../../tutorials/images.rst:52
msgid "``Image.COW``"
msgstr ""

#: ../../tutorials/images.rst:53
msgid "``Image.MUSIC_CROTCHET``"
msgstr ""

#: ../../tutorials/images.rst:54
msgid "``Image.MUSIC_QUAVER``"
msgstr ""

#: ../../tutorials/images.rst:55
msgid "``Image.MUSIC_QUAVERS``"
msgstr ""

#: ../../tutorials/images.rst:56
msgid "``Image.PITCHFORK``"
msgstr ""

#: ../../tutorials/images.rst:57
msgid "``Image.XMAS``"
msgstr ""

#: ../../tutorials/images.rst:58
msgid "``Image.PACMAN``"
msgstr ""

#: ../../tutorials/images.rst:59
msgid "``Image.TARGET``"
msgstr ""

#: ../../tutorials/images.rst:60
msgid "``Image.TSHIRT``"
msgstr ""

#: ../../tutorials/images.rst:61
msgid "``Image.ROLLERSKATE``"
msgstr ""

#: ../../tutorials/images.rst:62
msgid "``Image.DUCK``"
msgstr ""

#: ../../tutorials/images.rst:63
msgid "``Image.HOUSE``"
msgstr ""

#: ../../tutorials/images.rst:64
msgid "``Image.TORTOISE``"
msgstr ""

#: ../../tutorials/images.rst:65
msgid "``Image.BUTTERFLY``"
msgstr ""

#: ../../tutorials/images.rst:66
msgid "``Image.STICKFIGURE``"
msgstr ""

#: ../../tutorials/images.rst:67
msgid "``Image.GHOST``"
msgstr ""

#: ../../tutorials/images.rst:68
msgid "``Image.SWORD``"
msgstr ""

#: ../../tutorials/images.rst:69
msgid "``Image.GIRAFFE``"
msgstr ""

#: ../../tutorials/images.rst:70
msgid "``Image.SKULL``"
msgstr ""

#: ../../tutorials/images.rst:71
msgid "``Image.UMBRELLA``"
msgstr ""

#: ../../tutorials/images.rst:72
msgid "``Image.SNAKE``"
msgstr ""

#: ../../tutorials/images.rst:74
msgid ""
"There's quite a lot! Why not modify the code that makes the micro:bit "
"look happy to see what some of the other built-in images look like? (Just"
" replace ``Image.HAPPY`` with one of the built-in images listed above.)"
msgstr ""

#: ../../tutorials/images.rst:79
msgid "DIY Images"
msgstr ""

#: ../../tutorials/images.rst:81
msgid ""
"Of course, you want to make your own image to display on the micro:bit, "
"right?"
msgstr ""

#: ../../tutorials/images.rst:83
msgid "That's easy."
msgstr ""

#: ../../tutorials/images.rst:85
msgid ""
"Each LED pixel on the physical display can be set to one of ten values. "
"If a pixel is set to ``0`` (zero) then it's off. It literally has zero "
"brightness. However, if it is set to ``9`` then it is at its brightest "
"level. The values ``1`` to ``8`` represent the brightness levels between "
"off (``0``) and full on (``9``)."
msgstr ""

#: ../../tutorials/images.rst:91
msgid ""
"Armed with this information, it's possible to create a new image like "
"this::"
msgstr ""

#: ../../tutorials/images.rst:103
msgid ""
"(When run, the device should display an old-fashioned \"Blue Peter\" "
"sailing ship with the masts dimmer than the boat's hull.)"
msgstr ""

#: ../../tutorials/images.rst:106
msgid ""
"Have you figured out how to draw a picture? Have you noticed that each "
"line of the physical display is represented by a line of numbers ending "
"in ``:`` and enclosed between ``\"`` double quotes? Each number specifies"
" a brightness. There are five lines of five numbers so it's possible to "
"specify the individual brightness for each of the five pixels on each of "
"the five lines on the physical display. That's how to create a new image."
msgstr ""

#: ../../tutorials/images.rst:113
msgid "Simple!"
msgstr ""

#: ../../tutorials/images.rst:115
msgid ""
"In fact, you don't need to write this over several lines. If you think "
"you can keep track of each line, you can rewrite it like this::"
msgstr ""

#: ../../tutorials/images.rst:121
msgid "Animation"
msgstr ""

#: ../../tutorials/images.rst:123
msgid ""
"Static images are fun, but it's even more fun to make them move. This is "
"also amazingly simple to do with MicroPython ~ just use a list of images!"
msgstr ""

#: ../../tutorials/images.rst:126
msgid "Here is a shopping list::"
msgstr ""

#: ../../tutorials/images.rst:132
msgid "Here's how you'd represent this list in Python::"
msgstr ""

#: ../../tutorials/images.rst:136
msgid ""
"I've simply created a list called ``shopping`` and it contains three "
"items. Python knows it's a list because it's enclosed in square brackets "
"(``[`` and ``]``). Items in the list are separated by a comma (``,``) and"
" in this instance the items are three strings of characters: "
"``\"Eggs\"``, ``\"Bacon\"`` and ``\"Tomatoes\"``. We know they are "
"strings of characters because they're enclosed in quotation marks ``\"``."
msgstr ""

#: ../../tutorials/images.rst:143
msgid "You can store anything in a list with Python. Here's a list of numbers::"
msgstr ""

#: ../../tutorials/images.rst:150
msgid ""
"Numbers don't need to be quoted since they represent a value (rather than"
" a string of characters). It's the difference between ``2`` (the numeric "
"value 2) and ``\"2\"`` (the character/digit representing the number 2). "
"Don't worry if this doesn't make sense right now. You'll soon get used to"
" it."
msgstr ""

#: ../../tutorials/images.rst:155
msgid "It's even possible to store different sorts of things in the same list::"
msgstr ""

#: ../../tutorials/images.rst:159
msgid "Notice that last item? It was an image!"
msgstr ""

#: ../../tutorials/images.rst:161
msgid ""
"We can tell MicroPython to animate a list of images. Luckily we have a "
"couple of lists of images already built in. They're called "
"``Image.ALL_CLOCKS`` and ``Image.ALL_ARROWS``::"
msgstr ""

#: ../../tutorials/images.rst:169
msgid ""
"As with a single image, we use ``display.show`` to show it on the "
"device's display. However, we tell MicroPython to use "
"``Image.ALL_CLOCKS`` and it understands that it needs to show each image "
"in the list, one after the other. We also tell MicroPython to keep "
"looping over the list of images (so the animation lasts forever) by "
"saying ``loop=True``. Furthermore, we tell it that we want the delay "
"between each image to be only 100 milliseconds (a tenth of a second) with"
" the argument ``delay=100``."
msgstr ""

#: ../../tutorials/images.rst:177
msgid ""
"Can you work out how to animate over the ``Image.ALL_ARROWS`` list? How "
"do you avoid looping forever (hint: the opposite of ``True`` is ``False``"
" although the default value for ``loop`` is ``False``)? Can you change "
"the speed of the animation?"
msgstr ""

#: ../../tutorials/images.rst:182
msgid ""
"Finally, here's how to create your own animation. In my example I'm going"
" to make my boat sink into the bottom of the display::"
msgstr ""

#: ../../tutorials/images.rst:226
msgid "Here's how the code works:"
msgstr ""

#: ../../tutorials/images.rst:228
msgid "I create six ``boat`` images in exactly the same way I described above."
msgstr ""

#: ../../tutorials/images.rst:229
msgid "Then, I put them all into a list that I call ``all_boats``."
msgstr ""

#: ../../tutorials/images.rst:230
msgid ""
"Finally, I ask ``display.show`` to animate the list with a delay of 200 "
"milliseconds."
msgstr ""

#: ../../tutorials/images.rst:231
msgid ""
"Since I've not set ``loop=True`` the boat will only sink once (thus "
"making my animation scientifically accurate). :-)"
msgstr ""

#: ../../tutorials/images.rst:233
msgid ""
"What would you animate? Can you animate special effects? How would you "
"make an image fade out and then fade in again?"
msgstr ""

