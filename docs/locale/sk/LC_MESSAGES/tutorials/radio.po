msgid ""
msgstr ""
"Project-Id-Version: bbc-microbit-micropython\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-03-25 09:53+0200\n"
"PO-Revision-Date: 2019-08-12 16:42\n"
"Last-Translator: RicCo386\n"
"Language-Team: Slovak\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"
"Plural-Forms: nplurals=4; plural=(n==1) ? 0 : (n>=2 && n<=4) ? 1 : 3;\n"
"X-Generator: crowdin.com\n"
"X-Crowdin-Project: bbc-microbit-micropython\n"
"X-Crowdin-Language: sk\n"
"X-Crowdin-File: /master/docs/locale/sk/LC_MESSAGES/tutorials/radio.po\n"
"Language: sk_SK\n"

#: ../../tutorials/radio.rst:163
msgid "The image of binary counting is released under the licensing details listed here: https://en.wikipedia.org/wiki/File:Binary_counter.gif"
msgstr "Obrázok binárneho počítania je zverejnený s licenciou dostupnou tu: https://en.wikipedia.org/wiki/File:Binary_counter.gif"

#: ../../tutorials/radio.rst:2
msgid "Radio"
msgstr "Rádio"

#: ../../tutorials/radio.rst:4
msgid "Interaction at a distance feels like magic."
msgstr "Interakcia na diaľku vyzerá ako kúzlo."

#: ../../tutorials/radio.rst:6
msgid "Magic might be useful if you're an elf, wizard or unicorn, but such things only exist in stories."
msgstr "Kúzlo by si mohol/mohla využiť, ak by si bol(a) elfom, čarodejom alebo jednorožcom, ale takto to funguje iba v rozprávkach."

#: ../../tutorials/radio.rst:9
msgid "However, there's something much better than magic: physics!"
msgstr "Ale je tu niečo lepšie ako kúzla: fyzika!"

#: ../../tutorials/radio.rst:11
msgid "Wireless interaction is all about physics: radio waves (a type of electromagnetic radiation, similar to visible light) have some sort of property (such as their amplitude, phase or pulse width) modulated by a transmitter in such a way that information can be encoded and, thus, broadcast. When radio waves encounter an electrical conductor (i.e. an aerial), they cause an alternating current from which the information in the waves can be extracted and transformed back into its original form."
msgstr "Bezdrôtová interakcia je celá o fyzike: rádiové vlny (typ elektromagnetického žiarenia, podobné ako viditeľné svetlo) majú niektoré vlastnosti (napríklad amplitúdu, fázu alebo vlnovú dĺžku) modulované vysielačom takým spôsobom, že doň môže byť zakódovaná informácia a teda aj vysielaná. Keď sa rádiové vlny stretnú s elektrickým vodičom (t.j. anténa), spôsobia zmenu prúdu, pomocou ktorej vieme extrahovať informáciu z vń a zmeniť ju do jej pôvodného tvaru."

#: ../../tutorials/radio.rst:20
msgid "Layers upon Layers"
msgstr "Vrstvy za vrstvami"

#: ../../tutorials/radio.rst:22
msgid "If you remember, networks are built in layers."
msgstr "Ak si spomínaš, siete sú postavené vo vrstvách."

#: ../../tutorials/radio.rst:24
msgid "The most fundamental requirement for a network is some sort of connection that allows a signal to get from one device to the other. In our networking tutorial we used wires connected to the I/O pins. Thanks to the radio module we can do away with wires and use the physics summarised above as the invisible connection between devices."
msgstr "Najzákladnejšou požiadavkou na sieť je nejaké spojenie, ktoré umožní signálu dostať sa z jedného zariadenia na druhé. V našom sieťovom návode používame drôty pripojené k I/O pinom. Vďaka rádiovému modulu to môžeme urobiť aj bez drôtov a využiť fyziku, ako sme si vysvetlili už skôr, ako neviditeľné spojenie medzi dvoma zariadeniami."

#: ../../tutorials/radio.rst:30
msgid "The next layer up in the network stack is also different from the example in the networking tutorial. With the wired example we used digital on and off to send and read a signal from the pins. With the built-in radio on the micro:bit the smallest useful part of the signal is a byte."
msgstr "Ďalšia vrstva vo vrstvách siete je tiež trochu iná ako náš príklad v tomto návode. V príklade s káblami sme používali digitálnu informáciu zapnutý / vypnutý na posielanie a čítanie signálov z pinov. Ak používame vstavané rádio na micro:bite, najmenšou zmysluplnou jednotkou signálu je bajt."

#: ../../tutorials/radio.rst:36
msgid "Bytes"
msgstr "Bajty"

#: ../../tutorials/radio.rst:38
msgid "A byte is a unit of information that (usually) consists of eight bits. A bit is the smallest possible unit of information since it can only be in two states: on or off."
msgstr "bajt je jednotka informácie, ktorá (zvyčajne) pozostáva z ôsmych bitov. Bit je najmenšia možná jednotka informácie, keďže má len dva stavy: zapnutý alebo vypnutý."

#: ../../tutorials/radio.rst:42
msgid "Bytes work like a sort of abacus: each position in the byte is like a column in an abacus - they represent an associated number. In an abacus these are usually thousands, hundreds, tens and units (in UK parlance). In a byte they are 128, 64, 32, 16, 8, 4, 2 and 1. As bits (on/off signals) are sent over the air, they are re-combined into bytes by the recipient."
msgstr "Bajty fungujú ako počítadlo: každá poloha v bajte je ako stĺpec v počítadle - predstavujú čísla. Na počítadle su zvyajne tisícky, stovky, desiatky a jednotky (vo Veľkej Británii). V bajte sú to 128, 64, 32, 16, 8, 4, 2 and 1. Vzduchom sa síce posielajú bity (zapnutý/vypnutý), no u prijímateľa sa znova poskladajú do bajtov."

#: ../../tutorials/radio.rst:49
msgid "Have you spotted the pattern? (Hint: base 2.)"
msgstr "Všimol/všimla si si nejaký vzor? (Poradím ti: sú to násobky 2)"

#: ../../tutorials/radio.rst:51
msgid "By adding the numbers associated with the positions in a byte that are set to \"on\" we can represent numbers between 0 and 255. The image below shows how this works with five bits and counting from zero to 32:"
msgstr "Priraďovaním čísel nastavených ako zapnuté alebo vypnuté spojených s určitou pozíciou v bajte, vieme vyjadriť čísla od 0 do 255. Obrázok nižšie ukazuje, ako to funguje s piatimi bitmi a počítaním do 32:"

#: ../../tutorials/radio.rst:57
msgid "If we can agree what each one of the 255 numbers (encoded by a byte) represents ~ such as a character ~ then we can start to send text one character per byte at a time."
msgstr "Ak sa dohodneme, čo každé z 255 čísel (zakódovaných do bajtu) predstavuje ~ napríklad znak ~ potom môžeme začať posielať texty ako jeden znak na bajt."

#: ../../tutorials/radio.rst:60
msgid "Funnily enough, people have already `thought of this <https://en.wikipedia.org/wiki/ASCII>`_ ~ using bytes to encode and decode information is commonplace. This approximately corresponds to the Morse-code \"protocol\" layer in the wired networking example."
msgstr "Ľudia už na toto `mysleli <https://en.wikipedia.org/wiki/ASCII>`_ ~ používanie bajtov na zakódovanie a dekódovanie informácie je úplne bežné. Je to podobné ako \"protokol\" Morseovho kódu v príklade s káblovou sieťou."

#: ../../tutorials/radio.rst:65
msgid "A really great series of child (and teacher) friendly explanations of \"all things bytes\" can be found at the `CS unplugged <http://csunplugged.org/binary-numbers/>`_ website."
msgstr "Veľmi dobré a deťom (aj učiteľom) prístupné vysvetlenie \"všetko  o bajtoch\" je k dispozícii na webstránke `CS unplugged <http://csunplugged.org/binary-numbers/>`_ (po anglicky)."

#: ../../tutorials/radio.rst:70
msgid "Addressing"
msgstr "Adresovanie"

#: ../../tutorials/radio.rst:72
msgid "The problem with radio is that you can't transmit directly to one person. Anyone with an appropriate aerial can receive the messages you transmit. As a result it's important to be able to differentiate who should be receiving broadcasts."
msgstr "Problém s rádion je, že nemôžeš vysielať priamo konkrétnej osobe. Hocikto s vhodnou ant=nou môže prijímať správy, ktoré vysielaš. Preto je dôležité, aby sme vedeli roylíšiť, kto má byť schopný prijímať náš signál."

#: ../../tutorials/radio.rst:77
msgid "The way the radio built into the micro:bit solves this problem is quite simple:"
msgstr "Spôsob, akým je rádio vstavané do micro:bitu tento problém rieši vcelku jednoducho:"

#: ../../tutorials/radio.rst:79
msgid "It's possible to tune the radio to different channels (numbered 0-100). This works in exactly the same way as kids' walkie-talkie radios: everyone tunes into the same channel and everyone hears what everyone else broadcasts via that channel. As with walkie-talkies, if you use adjacent channels there is a slight possibility of interference."
msgstr "Rádio je možné naladiť na rôzne kanály (očíslované od 0 do 100). Funguje to presne ako na detských vysielačkách: každý sa naladí na rovnaký kanál a každý počuje, čo všetci vysielajú. Rovnako, ako pri detských vysielačkách, aj tu je malá šanca interferencie, ak použiješ blízke kanály."

#: ../../tutorials/radio.rst:81
msgid "The radio module allows you to specify two pieces of information: an address and a group. The address is like a postal address whereas a group is like a specific recipient at the address. The important thing is the radio will filter out messages that it receives that do not match *your* address and group. As a result, it's important to pre-arrange the address and group your application is going to use."
msgstr "Rádio modul ti umožňuje špecifikovať dva typy informácie: adresu a skupinu. Adresa je ako poštová adresa a skupina je ako konkrétny prijímateľ na danej adrese. Dôležité je mať na pamäti, že rádio odfiltruje správy, ktoré prijalo, no nezodpovedali tvojej adrese a skupine. Dôsledkom toho je, že je veľmi dôležité správne nastaviť, ktorú adresu a skupinu bude tvoja aplikácia používať."

#: ../../tutorials/radio.rst:83
msgid "Of course, the micro:bit is still receiving broadcast messages for other address/group combinations. The important thing is you don't need to worry about filtering those out. Nevertheless, if someone were clever enough, they could just read *all the wireless network traffic* no matter what the target address/group was supposed to be. In this case, it's *essential* to use encrypted means of communication so only the desired recipient can actually read the message that was broadcast. Cryptography is a fascinating subject but, unfortunately, beyond the scope of this tutorial."
msgstr "Samozrejme, micro:bit stále prijíma vysielané správy pre ostatné adresy a skupiny. Dôležité však je, že o toto sa nemusíš starať. Ak by však bol dosť šikovný, mohol by čítať *všetky správy v bezdrôtovej sieti* bez ohľadu na to, pre akú adresu a skupinu sú určené. V takom prípade je dôležité používať iba šifrovanú komunikáciu, aby si správu vedel prečítať iba skutočný adresát. Kryptografia je fascinujúca téma, no žiaľ presahuje rozsah tohto návodu."

#: ../../tutorials/radio.rst:93
msgid "Fireflies"
msgstr "Svätojánske mušky"

#: ../../tutorials/radio.rst:95
msgid "This is a firefly:"
msgstr "Toto je svätojánska muška"

#: ../../tutorials/radio.rst:99
msgid "It's a sort of bug that uses bioluminescence to signal (without wires) to its friends. Here's what they look like when they signal to each other:"
msgstr "Je to druh hmyzu, ktorý využíva svetielkovanie na komunikáciu (bezdrôtovú) so svojimi kamošmi. Takto vyzerajú, keď si navzájom posielajú signály:"

#: ../../tutorials/radio.rst:104
msgid "The BBC have `rather a beautiful video <http://www.bbc.com/earth/story/20160224-worlds-largest-gathering-of-synchronised-fireflies>`_ of fireflies available online."
msgstr "BBC má k dispozícii online `veľmi pekné video <http://www.bbc.com/earth/story/20160224-worlds-largest-gathering-of-synchronised-fireflies>`_ o svätojánskych muškách."

#: ../../tutorials/radio.rst:106
msgid "We're going to use the radio module to create something akin to a swarm of fireflies signalling to each other."
msgstr "Pomocou rádiového modulu vytvoríme niečo podobné roju svätojánskych mušiek, ktoré navzájom komunikujú."

#: ../../tutorials/radio.rst:109
msgid "First ``import radio`` to make the functions available to your Python program. Then call the ``radio.on()`` function to turn the radio on. Since the radio draws power and takes up memory we've made it so *you* decide when it is enabled (there is, of course a ``radio.off()`` function)."
msgstr "Na začiatok importuj rádiový modul pomocou ``import radio``, aby si mohol/mohla používať tieto funkcie vo svojom programe. Potom zavolaj funkciu ``radio.on()``, abz sa rádio zaplo. Keďže rádio spotrebováva energiu aj pamäť, urobili sme to tak, aby si *ty* rozhodol/rozhodla, kedy je zapnuté  (samozrejme existuje aj funkcia ``radio.off()``, ktorá ho vypne). "

#: ../../tutorials/radio.rst:114
msgid "At this point the radio module is configured to sensible defaults that make it compatible with other platforms that may target the BBC micro:bit. It is possible to control many of the features discussed above (such as channel and addressing) as well as the amount of power used to broadcast messages and the amount of RAM the incoming message queue will take up. The API documentation contains all the information you need to configure the radio to your needs."
msgstr "Teraz má rádio nastavené zmysluplné predvolené nastavenia, vďaka ktorým je kompatibilné s inými platformami, ktoré môžu komunikovať s tvojím micro:bitom. Môžeme ovládať množstvo vlastností, ktoré sme spomenuli už skôr (napríklad kanály a adresovanie) a tiež aj množstvo energie, ktorá sa použije na vysielanie správ a množstvo RAM, ktorá sa využije na uchovanie prichádzajúcich správ. API dokumentácia obsahuje všetky informácie potrebné na konfiguráciu rádia podľa tvojich potrieb."

#: ../../tutorials/radio.rst:121
msgid "Assuming we're happy with the defaults, the simplest way to send a message is like this::"
msgstr "Ak predpokladáme, že nám vyhovujú predvolené nastavenia, najjednoduchší spôsob, ako poslať správu je::"

#: ../../tutorials/radio.rst:126
msgid "The example uses the ``send`` function to simply broadcast the string \"a message\". To receive a message is even easier::"
msgstr "Príklad používa funkciu ``send`` na jednoduché odoslanie reťazca \"a message\" (správa). Prijať správu je ešte jednoduchšie::"

#: ../../tutorials/radio.rst:131
msgid "As messages are received they are put on a message queue. The ``receive`` function returns the oldest message from the queue as a string, making space for a new incoming message. If the message queue fills up, then new incoming messages are ignored."
msgstr "Správy sa po prijatí radia do poradia. Funkcia ``receive`` (prijímať) vráti ako reťazec najstaršiu správu z poradia a tým uvoľní miesto pre novú prichádzajúcu správu. Ak sa poradie zaplní, nové správy budú ignorované."

#: ../../tutorials/radio.rst:136
msgid "That's really all there is to it! (Although the radio module is also powerful enough that you can send any arbitrary type of data, not just strings. See the API documentation for how this works.)"
msgstr "To už je k tomu naozaj všetko! (Aj keď rádio modul je dostatočne vybavený na to, aby si s ním posielal(a) akýkoľvek typ dát, nie len reťazce. Pre viac informácii o tom, ako to funguje, pozri API dokumentáciu.)"

#: ../../tutorials/radio.rst:140
msgid "Armed with this knowledge, it's simple to make micro:bit fireflies like this:"
msgstr "Vyzbrojení týmito znalosťami teraz takto ľahko vyrobíme micro:bitové svätojánske mušky:"

#: ../../tutorials/radio.rst:145
msgid "The import stuff happens in the event loop. First, it checks if button A was pressed and, if it was, uses the radio to send the message \"flash\". Then it reads any messages from the message queue with ``radio.receive()``. If there is a message it sleeps a short, random period of time (to make the display more interesting) and uses ``display.show()`` to animate a firefly flash. Finally, to make things a bit exciting, it chooses a random number so that it has a 1 in 10 chance of re-broadcasting the \"flash\" message to anyone else (this is how it's possible to sustain the firefly display among several devices). If it decides to re-broadcast then it waits for half a second (so the display from the initial flash message has chance to die down) before sending the \"flash\" signal again. Because this code is enclosed within a ``while True`` block, it loops back to the beginning of the event loop and repeats this process forever."
msgstr "Import sa udeje v cykle. Najskôr skontroluje, či bolo stlačené tlačítko A a ak bolo, použije rádio na odoslanie správy \"blik\". Potom číta správy z poradia pomocou ``radio.receive()``. Ak je tam správa, chvíľku počká  - dĺžka čakania je náhodná, aby displej vyzeral zaujímavejšie a potom pomocou ``display.show()`` animuje blikanie svätojánskej mušky. Nakoniec, aby to celé bolo trochu zábavnejšie, vyberie si náhodné číslo tak, aby bola šanca 1 ku 10, že správu (blik) pošle niekomu ďalšiemu (takto je možné udržať \"svätojánsky\" displej medzi viacerými zariadeniami). Ak sa rozhodne správu preposlať, počká pol sekundy (takže displej z pôvodného bliku stihne stmavnúť) a potom pošle signál znova. Keďže tento kód je uzavretý v bloku ``while True`` (=opakuj kým platí, že pravda je pravdivá), vráti sa potom späť na začiatok cyklu a opakuje tento proces donekonečna."

#: ../../tutorials/radio.rst:159
msgid "The end result (using a group of micro:bits) should look something like this:"
msgstr "Výsledok (s použitím skupiny micro:bitov) by mal vyzerať takto nejako:"

