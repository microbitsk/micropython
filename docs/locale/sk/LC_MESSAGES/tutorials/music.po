msgid ""
msgstr ""
"Project-Id-Version: bbc-microbit-micropython\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-03-25 09:53+0200\n"
"PO-Revision-Date: 2019-08-12 16:42\n"
"Last-Translator: RicCo386\n"
"Language-Team: Slovak\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"
"Plural-Forms: nplurals=4; plural=(n==1) ? 0 : (n>=2 && n<=4) ? 1 : 3;\n"
"X-Generator: crowdin.com\n"
"X-Crowdin-Project: bbc-microbit-micropython\n"
"X-Crowdin-Language: sk\n"
"X-Crowdin-File: /master/docs/locale/sk/LC_MESSAGES/tutorials/music.po\n"
"Language: sk_SK\n"

#: ../../tutorials/music.rst:2
msgid "Music"
msgstr "Hudba"

#: ../../tutorials/music.rst:4
msgid "MicroPython on the BBC micro:bit comes with a powerful music and sound module. It's very easy to generate bleeps and bloops from the device *if you attach a speaker*. Use crocodile clips to attach pin 0 and GND to the positive and negative inputs on the speaker - it doesn't matter which way round they are connected to the speaker."
msgstr "MicroPython na BBC micro:bite obsahuje nadupaný modul na hudbu a zvuky. Generovať zvuky je veľmi jednoduché, *ak pripojíš reproduktor*. Prepoj krokodílkami piny 0 a GND s kladným a záporným vstupom do reproduktora - nezáleží na tom, v akom poradí sú pripojené."

#: ../../tutorials/music.rst:14
msgid "Do not attempt this with a Piezo buzzer - such buzzers are only able to play a single tone."
msgstr "Toto neskúšaj s Piezo bzučiakom - tieto bzučiaky vedia hrať iba jeden tón."

#: ../../tutorials/music.rst:17
msgid "Let's play some music::"
msgstr "Poďme zahrať nejakú hudbu::"

#: ../../tutorials/music.rst:23
msgid "Notice that we import the ``music`` module. It contains methods used to make and control sound."
msgstr "Všimni si, že importujeme modul ``music`` (\"hudba\"). Ten obsahuje metódy na vytváranie a ovládanie zvuku."

#: ../../tutorials/music.rst:26
msgid "MicroPython has quite a lot of built-in melodies. Here's a complete list:"
msgstr "MicroPython má dosť veľa vstavaných melódií. Tu je ich kompletný zoznam:"

#: ../../tutorials/music.rst:28
msgid "``music.DADADADUM``"
msgstr ""

#: ../../tutorials/music.rst:29
msgid "``music.ENTERTAINER``"
msgstr ""

#: ../../tutorials/music.rst:30
msgid "``music.PRELUDE``"
msgstr ""

#: ../../tutorials/music.rst:31
msgid "``music.ODE``"
msgstr ""

#: ../../tutorials/music.rst:32
msgid "``music.NYAN``"
msgstr ""

#: ../../tutorials/music.rst:33
msgid "``music.RINGTONE``"
msgstr ""

#: ../../tutorials/music.rst:34
msgid "``music.FUNK``"
msgstr ""

#: ../../tutorials/music.rst:35
msgid "``music.BLUES``"
msgstr ""

#: ../../tutorials/music.rst:36
msgid "``music.BIRTHDAY``"
msgstr ""

#: ../../tutorials/music.rst:37
msgid "``music.WEDDING``"
msgstr ""

#: ../../tutorials/music.rst:38
msgid "``music.FUNERAL``"
msgstr ""

#: ../../tutorials/music.rst:39
msgid "``music.PUNCHLINE``"
msgstr ""

#: ../../tutorials/music.rst:40
msgid "``music.PYTHON``"
msgstr ""

#: ../../tutorials/music.rst:41
msgid "``music.BADDY``"
msgstr ""

#: ../../tutorials/music.rst:42
msgid "``music.CHASE``"
msgstr ""

#: ../../tutorials/music.rst:43
msgid "``music.BA_DING``"
msgstr ""

#: ../../tutorials/music.rst:44
msgid "``music.WAWAWAWAA``"
msgstr ""

#: ../../tutorials/music.rst:45
msgid "``music.JUMP_UP``"
msgstr ""

#: ../../tutorials/music.rst:46
msgid "``music.JUMP_DOWN``"
msgstr ""

#: ../../tutorials/music.rst:47
msgid "``music.POWER_UP``"
msgstr ""

#: ../../tutorials/music.rst:48
msgid "``music.POWER_DOWN``"
msgstr ""

#: ../../tutorials/music.rst:50
msgid "Take the example code and change the melody. Which one is your favourite? How would you use such tunes as signals or cues?"
msgstr "Vezmi si ukážkový kód a zmeň melódiu. Ktorá je tvoja obľúbená? Vedel(a) by si nejako využiť takéto melódie ako signály?"

#: ../../tutorials/music.rst:54
msgid "Wolfgang Amadeus Microbit"
msgstr "Wolfgang Amadeus Microbit"

#: ../../tutorials/music.rst:56
msgid "Creating your own tunes is easy!"
msgstr "Vytváranie vlastných melódií je jednoduché!"

#: ../../tutorials/music.rst:58
msgid "Each note has a name (like ``C#`` or ``F``), an octave (telling MicroPython how high or low the note should be played) and a duration (how long it lasts through time). Octaves are indicated by a number ~ 0 is the lowest octave, 4 contains middle C and 8 is about as high as you'll ever need unless you're making music for dogs. Durations are also expressed as numbers. The higher the value of the duration the longer it will last. Such values are related to each other - for instance, a duration of ``4`` will last twice as long as a duration ``2`` (and so on). If you use the note name ``R`` then MicroPython will play a rest (i.e. silence) for the specified duration."
msgstr "Každá nota má svoj názov (napríklad ``C#`` alebo ``F``), oktávu (tá hovorí MicroPythonu ako vysoko alebo nízko má daný tón zahrať) a dĺžku (ako dlho má trvať). Oktávy sú označený číslom ~ 0 je najnižšia oktáva, 4 obsahuje stredné C a 8 je tak vysoko, že to nikdy nevyužiješ. Teda pokiaľ nebudeš komponovať hudbu pre psov. Dĺžka tónu je tiež vyjadrená číslami. Čím vyššia hodnota, tým dlhšie bude trvať. Tieto hodnoty navzájom súvisia - napríklad dĺžka trvania ``4`` bude trvať dvakrát tak dlho ako ``2`` (a tak ďalej). Ak použiješ notu ``R``, vtedy MicroPython zahrá pomlčku (t.j. ticho) so zvolenou dĺžkou (trvaním)."

#: ../../tutorials/music.rst:68
msgid "Each note is expressed as a string of characters like this::"
msgstr "Každá nota je vyjadrená takýto reťazec znakov::"

#: ../../tutorials/music.rst:72
msgid "For example, ``\"A1:4\"`` refers to the note named ``A`` in octave number ``1`` to be played for a duration of ``4``."
msgstr "Napríklad, ``\"A1:4\"`` znamená, že nota ``A`` v oktáve ``1`` má byť zahranás dĺžkou trvania ``4``."

#: ../../tutorials/music.rst:75
msgid "Make a list of notes to create a melody (it's equivalent to creating an animation with a list of images). For example, here's how to make MicroPython play opening of \"Frere Jaques\"::"
msgstr "Priprav zoznam nôt, pomocou ktorého vytvoríš melódiu (je to podobné, ako vytváranie animácie pomocou zoznamu obrázkov). Napríklad takto dosiahneš, že MicroPython zahrá úvod pesničky \"Frere Jacques\"::"

#: ../../tutorials/music.rst:87
msgid "MicroPython helps you to simplify such melodies. It'll remember the octave and duration values until you next change them. As a result, the example above can be re-written as::"
msgstr "MicroPython vie takéto melódie zjednodušiť. Zapamätá si oktávu a dĺžku trvania, až kým ich nezmeníš. Vďaka tomu, vyššie uvedený príklad môžeš zapísať aj takto::"

#: ../../tutorials/music.rst:97
msgid "Notice how the octave and duration values only change when they have to. It's a lot less typing and simpler to read."
msgstr "Všimni si, ako sa oktáva a trvanie menia iba vtedy, keď musia. Musíme tak omnoho menej písať a je to navyše ľahšie aj na čítanie."

#: ../../tutorials/music.rst:101
msgid "Sound Effects"
msgstr "Zvukové efekty"

#: ../../tutorials/music.rst:103
msgid "MicroPython lets you make tones that are not musical notes. For example, here's how to create a Police siren effect::"
msgstr "MicroPython ti umožní vytvárať aj tóny, ktoré nie sú hudobnými notami. Tu je príklad, ako vytvoriť efekt policajnej sirény::"

#: ../../tutorials/music.rst:115
msgid "Notice how the ``music.pitch`` *method* is used in this instance. It expects a frequency. For example, the frequency of ``440`` is the same as a concert ``A`` used to tune a symphony orchestra."
msgstr "Všimni si, ako sme v tomto prípade použili *metódu* ``music.pitch``. Táto metóda očakáva frekvenciu ako argument. Napríklad frekvencia ``440`` je komorné ``A``, ktoré sa používa pri ladení orchestra."

#: ../../tutorials/music.rst:119
msgid "In the example above the ``range`` function is used to generate ranges of numeric values. These numbers are used to define the pitch of the tone. The three arguments for the ``range`` function are the start value, end value and step size. Therefore, the first use of ``range`` is saying, in English, \"create a range of numbers between 880 and 1760 in steps of 16\". The second use of ``range`` is saying, \"create a range of values between 1760 and 880 in steps of -16\". This is how we get a range of frequencies that go up and down in pitch like a siren."
msgstr "V tomto príklade používame funkciu ``range`` na vytvorenie postupnosti číselných hodnôt. Tieto čísla sa používajú na definovanie farby tónu. Tri argumenty pre funkciu ``range`` sú začiatočná hodnota, koncová hodnota a krok. Preto tam, kde používame ``range`` prvýkrát hovorím po slovensky \"vytvor postupnosť čísel medzi 880 a 1760 s krokom 16\". Pri druhom použití hovoríme \"vytvor postupnosť hodnôt medzi 1760 a 880 s krokom -16\". Takto vytvoríme postupnosť frekvencií, ktoré stúpajú a klesajú v tóne rovnako ako policajná siréna."

#: ../../tutorials/music.rst:128
msgid "Because the siren should last forever it's wrapped in an infinite ``while`` loop."
msgstr "A keďže siréna môže trvať donekonečna, zabalili sme ju do nekonečného ``while`` cyklu."

#: ../../tutorials/music.rst:131
msgid "Importantly, we have introduced a new sort of a loop inside the ``while`` loop: the ``for`` loop. In English it's like saying, \"for each item in some collection, do some activity with it\". Specifically in the example above, it's saying, \"for each frequency in the specified range of frequencies, play the pitch of that frequency for 6 milliseconds\". Notice how the thing to do for each item in a for loop is indented (as discussed earlier) so Python knows exactly which code to run to handle the individual items."
msgstr "Práve sme si predstavili nový druh cyklu vo vnútri ``while`` cyklu: ``for`` cyklus. Po slovensky by sme namiesto neho povedali niečo takéto: \"s každým prvkom v nejakej zbierke prvkov urob nejakú aktivitu\". Konkrétne, v uvedenom príklade by to bolo asi takto: \"s každou frekvenciou v definovanej postupnosti frekvencií zahraj tón tej frekvencie v dĺžke 6 milisekúnd\". Všimni si, že to, čo sa má diať s každou položkou v cykle, je odsadené (ako sme hovorili už v predchádzajúcich návodoch), takže Python vie presne, ktorú časť kódu má spustiť pre každú položku."

