# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2018, Multiple authors
# This file is distributed under the same license as the BBC micro:bit
# MicroPython package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: BBC micro:bit MicroPython 0.5.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-03-25 09:53+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../tutorials/music.rst:2
msgid "Music"
msgstr ""

#: ../../tutorials/music.rst:4
msgid ""
"MicroPython on the BBC micro:bit comes with a powerful music and sound "
"module. It's very easy to generate bleeps and bloops from the device *if "
"you attach a speaker*. Use crocodile clips to attach pin 0 and GND to the"
" positive and negative inputs on the speaker - it doesn't matter which "
"way round they are connected to the speaker."
msgstr ""

#: ../../tutorials/music.rst:14
msgid ""
"Do not attempt this with a Piezo buzzer - such buzzers are only able to "
"play a single tone."
msgstr ""

#: ../../tutorials/music.rst:17
msgid "Let's play some music::"
msgstr ""

#: ../../tutorials/music.rst:23
msgid ""
"Notice that we import the ``music`` module. It contains methods used to "
"make and control sound."
msgstr ""

#: ../../tutorials/music.rst:26
msgid "MicroPython has quite a lot of built-in melodies. Here's a complete list:"
msgstr ""

#: ../../tutorials/music.rst:28
msgid "``music.DADADADUM``"
msgstr ""

#: ../../tutorials/music.rst:29
msgid "``music.ENTERTAINER``"
msgstr ""

#: ../../tutorials/music.rst:30
msgid "``music.PRELUDE``"
msgstr ""

#: ../../tutorials/music.rst:31
msgid "``music.ODE``"
msgstr ""

#: ../../tutorials/music.rst:32
msgid "``music.NYAN``"
msgstr ""

#: ../../tutorials/music.rst:33
msgid "``music.RINGTONE``"
msgstr ""

#: ../../tutorials/music.rst:34
msgid "``music.FUNK``"
msgstr ""

#: ../../tutorials/music.rst:35
msgid "``music.BLUES``"
msgstr ""

#: ../../tutorials/music.rst:36
msgid "``music.BIRTHDAY``"
msgstr ""

#: ../../tutorials/music.rst:37
msgid "``music.WEDDING``"
msgstr ""

#: ../../tutorials/music.rst:38
msgid "``music.FUNERAL``"
msgstr ""

#: ../../tutorials/music.rst:39
msgid "``music.PUNCHLINE``"
msgstr ""

#: ../../tutorials/music.rst:40
msgid "``music.PYTHON``"
msgstr ""

#: ../../tutorials/music.rst:41
msgid "``music.BADDY``"
msgstr ""

#: ../../tutorials/music.rst:42
msgid "``music.CHASE``"
msgstr ""

#: ../../tutorials/music.rst:43
msgid "``music.BA_DING``"
msgstr ""

#: ../../tutorials/music.rst:44
msgid "``music.WAWAWAWAA``"
msgstr ""

#: ../../tutorials/music.rst:45
msgid "``music.JUMP_UP``"
msgstr ""

#: ../../tutorials/music.rst:46
msgid "``music.JUMP_DOWN``"
msgstr ""

#: ../../tutorials/music.rst:47
msgid "``music.POWER_UP``"
msgstr ""

#: ../../tutorials/music.rst:48
msgid "``music.POWER_DOWN``"
msgstr ""

#: ../../tutorials/music.rst:50
msgid ""
"Take the example code and change the melody. Which one is your favourite?"
" How would you use such tunes as signals or cues?"
msgstr ""

#: ../../tutorials/music.rst:54
msgid "Wolfgang Amadeus Microbit"
msgstr ""

#: ../../tutorials/music.rst:56
msgid "Creating your own tunes is easy!"
msgstr ""

#: ../../tutorials/music.rst:58
msgid ""
"Each note has a name (like ``C#`` or ``F``), an octave (telling "
"MicroPython how high or low the note should be played) and a duration "
"(how long it lasts through time). Octaves are indicated by a number ~ 0 "
"is the lowest octave, 4 contains middle C and 8 is about as high as "
"you'll ever need unless you're making music for dogs. Durations are also "
"expressed as numbers. The higher the value of the duration the longer it "
"will last. Such values are related to each other - for instance, a "
"duration of ``4`` will last twice as long as a duration ``2`` (and so "
"on). If you use the note name ``R`` then MicroPython will play a rest "
"(i.e. silence) for the specified duration."
msgstr ""

#: ../../tutorials/music.rst:68
msgid "Each note is expressed as a string of characters like this::"
msgstr ""

#: ../../tutorials/music.rst:72
msgid ""
"For example, ``\"A1:4\"`` refers to the note named ``A`` in octave number"
" ``1`` to be played for a duration of ``4``."
msgstr ""

#: ../../tutorials/music.rst:75
msgid ""
"Make a list of notes to create a melody (it's equivalent to creating an "
"animation with a list of images). For example, here's how to make "
"MicroPython play opening of \"Frere Jaques\"::"
msgstr ""

#: ../../tutorials/music.rst:87
msgid ""
"MicroPython helps you to simplify such melodies. It'll remember the "
"octave and duration values until you next change them. As a result, the "
"example above can be re-written as::"
msgstr ""

#: ../../tutorials/music.rst:97
msgid ""
"Notice how the octave and duration values only change when they have to. "
"It's a lot less typing and simpler to read."
msgstr ""

#: ../../tutorials/music.rst:101
msgid "Sound Effects"
msgstr ""

#: ../../tutorials/music.rst:103
msgid ""
"MicroPython lets you make tones that are not musical notes. For example, "
"here's how to create a Police siren effect::"
msgstr ""

#: ../../tutorials/music.rst:115
msgid ""
"Notice how the ``music.pitch`` *method* is used in this instance. It "
"expects a frequency. For example, the frequency of ``440`` is the same as"
" a concert ``A`` used to tune a symphony orchestra."
msgstr ""

#: ../../tutorials/music.rst:119
msgid ""
"In the example above the ``range`` function is used to generate ranges of"
" numeric values. These numbers are used to define the pitch of the tone. "
"The three arguments for the ``range`` function are the start value, end "
"value and step size. Therefore, the first use of ``range`` is saying, in "
"English, \"create a range of numbers between 880 and 1760 in steps of "
"16\". The second use of ``range`` is saying, \"create a range of values "
"between 1760 and 880 in steps of -16\". This is how we get a range of "
"frequencies that go up and down in pitch like a siren."
msgstr ""

#: ../../tutorials/music.rst:128
msgid ""
"Because the siren should last forever it's wrapped in an infinite "
"``while`` loop."
msgstr ""

#: ../../tutorials/music.rst:131
msgid ""
"Importantly, we have introduced a new sort of a loop inside the ``while``"
" loop: the ``for`` loop. In English it's like saying, \"for each item in "
"some collection, do some activity with it\". Specifically in the example "
"above, it's saying, \"for each frequency in the specified range of "
"frequencies, play the pitch of that frequency for 6 milliseconds\". "
"Notice how the thing to do for each item in a for loop is indented (as "
"discussed earlier) so Python knows exactly which code to run to handle "
"the individual items."
msgstr ""

