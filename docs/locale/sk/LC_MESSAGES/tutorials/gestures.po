# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2018, Multiple authors
# This file is distributed under the same license as the BBC micro:bit
# MicroPython package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: BBC micro:bit MicroPython 0.5.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-03-25 09:53+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../tutorials/gestures.rst:2
msgid "Gestures"
msgstr ""

#: ../../tutorials/gestures.rst:4
msgid ""
"The really interesting side-effect of having an accelerometer is gesture "
"detection. If you move your BBC micro:bit in a certain way (as a gesture)"
" then MicroPython is able to detect this."
msgstr ""

#: ../../tutorials/gestures.rst:8
msgid ""
"MicroPython is able to recognise the following gestures: ``up``, "
"``down``, ``left``, ``right``, ``face up``, ``face down``, ``freefall``, "
"``3g``, ``6g``, ``8g``, ``shake``. Gestures are always represented as "
"strings. While most of the names should be obvious, the ``3g``, ``6g`` "
"and ``8g`` gestures apply when the device encounters these levels of "
"g-force (like when an astronaut is launched into space)."
msgstr ""

#: ../../tutorials/gestures.rst:15
msgid ""
"To get the current gesture use the ``accelerometer.current_gesture`` "
"method. Its result is going to be one of the named gestures listed above."
" For example, this program will only make your device happy if it is face"
" up::"
msgstr ""

#: ../../tutorials/gestures.rst:28
msgid ""
"Once again, because we want the device to react to changing circumstances"
" we use a ``while`` loop. Within the *scope* of the loop the current "
"gesture is read and put into ``gesture``. The ``if`` conditional checks "
"if ``gesture`` is equal to ``\"face up\"`` (Python uses ``==`` to test "
"for equality, a single equals sign ``=`` is used for assignment - just "
"like how we assign the gesture reading to the ``gesture`` object). If the"
" gesture is equal to ``\"face up\"`` then use the display to show a happy"
" face. Otherwise, the device is made to look angry!"
msgstr ""

#: ../../tutorials/gestures.rst:38
msgid "Magic-8"
msgstr ""

#: ../../tutorials/gestures.rst:40
msgid ""
"A Magic-8 ball is a toy first invented in the 1950s. The idea is to ask "
"it a yes/no question, shake it and wait for it to reveal the truth. It's "
"rather easy to turn into a program::"
msgstr ""

#: ../../tutorials/gestures.rst:77
msgid ""
"Most of the program is a list called ``answers``. The actual game is in "
"the ``while`` loop at the end."
msgstr ""

#: ../../tutorials/gestures.rst:80
msgid ""
"The default state of the game is to show the character ``\"8\"``. "
"However, the program needs to detect if it has been shaken. The "
"``was_gesture`` method uses its argument (in this case, the string "
"``\"shake\"`` because we want to detect a shake) to return a ``True`` / "
"``False`` response. If the device was shaken the ``if`` conditional drops"
" into its block of code where it clears the screen, waits for a second "
"(so the device appears to be thinking about your question) and displays a"
" randomly chosen answer."
msgstr ""

#: ../../tutorials/gestures.rst:88
msgid ""
"Why not ask it if this is the greatest program ever written? What could "
"you do to \"cheat\" and make the answer always positive or negative? "
"(Hint: use the buttons.)"
msgstr ""

