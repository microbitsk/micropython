msgid ""
msgstr ""
"Project-Id-Version: bbc-microbit-micropython\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-03-25 09:53+0200\n"
"PO-Revision-Date: 2018-05-04 14:50-0400\n"
"Last-Translator: RicCo386 <richard.kellner@pycon.sk>\n"
"Language-Team: Slovak\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"
"Plural-Forms: nplurals=4; plural=(n==1) ? 0 : (n>=2 && n<=4) ? 1 : 3;\n"
"X-Generator: crowdin.com\n"
"X-Crowdin-Project: bbc-microbit-micropython\n"
"X-Crowdin-Language: sk\n"
"X-Crowdin-File: /master/docs/locale/sk/LC_MESSAGES/tutorials/storage.po\n"
"\n"
"Language: sk_SK\n"

#: ../../tutorials/storage.rst:249
msgid "The image of paper files is used under a Creative Commons License and is available here: https://www.flickr.com/photos/jenkim/2270085025"
msgstr "Obrázok papierových zložiek sa používa pod licenciou Creative Commons a je dostupný tu: https://www.flickr.com/photos/jenkim/2270085025"

#: ../../tutorials/storage.rst:2
msgid "Storage"
msgstr "Úložisko"

#: ../../tutorials/storage.rst:4
msgid "Sometimes you need to store useful information. Such information is stored as data: representation of information (in a digital form when stored on computers). If you store data on a computer it should persist, even if you switch the device off and on again."
msgstr "Niekdy potrebuješ uložiť užitočné informácie. Tieto informácie sú uložené ako dáta: reprezentácia informácie (v digitálnej forme, ak sú uložené v počítačoch). Ak uložíš dáta do počítača, mali by ostať zachované a to aj vtedy, ak zariadenie vypneš a znova zapneš."

#: ../../tutorials/storage.rst:9
msgid "Happily MicroPython on the micro:bit allows you to do this with a very simple file system. Because of memory constraints **there is approximately 30k of storage available** on the file system."
msgstr "Našťastie, MicroPython na micro:bite ti umožňuje urobiť to pomocou veľmi jednoduchého súborového systému. Keďže pamäť má výrazné obmedzenia, v súborovom systéme **máš k dispozícii približne 30k úložného priestoru**."

#: ../../tutorials/storage.rst:13
msgid "What is a file system?"
msgstr "Čo je to súborový systém?"

#: ../../tutorials/storage.rst:15
msgid "It's a means of storing and organising data in a persistent manner - any data stored in a file system should survive restarts of the device. As the name suggests, data stored on a file system is organised into files."
msgstr "Je to spôsob, akým sa ukladajú a triedia dáta tak, aby pretrvali - všetky dáta uložené v súborovom systéme by mali prežiť reštart zariadenia. Ako naznačuje názov, dáta uložené v súborovom systéme sú ukladané v súboroch."

#: ../../tutorials/storage.rst:21
msgid "A computer file is a named digital resource that's stored on a file system. Such resources contain useful information as data. This is exactly how a paper file works. It's a sort of named container that contains useful information. Usually, both paper and digital files are named to indicate what they contain. On computers it is common to end a file with a ``.something`` suffix. Usually, the \"something\" indicates what type of data is used to represent the information. For example, ``.txt`` indicates a text file, ``.jpg`` a JPEG image and ``.mp3`` sound data encoded as MP3."
msgstr "Počítačový súbor je pomenovaný digitálny zdroj údajov, ktorý je uložený v súborovom systéme. Takéto zdroje obsahujú užitočné informácie. Rovnako fungujú aj v papierovej forme. Je to vlastne pomenovaný zakladač, ktorý obsahuje užitočné informácie. Zvyčajne, papierové aj digitálne súbory majú svoje mená, aby sme ľahko vedeli určiť, čo obsahujú. Na počítačoch je bežné dávať súborom koncovku ``.nieco``. Toto \"nieco\" zvyčajne naznačuje, akým typom dát uchovávame informáciu. Napríklad ``.txt`` označuje textový súbor, ``.jpg`` obrázok vo formáte JPEG a ``.mp3`` zvukové dáta zakódované vo formáte MP3."

#: ../../tutorials/storage.rst:30
msgid "Some file systems (such as the one found on your laptop or PC) allow you to organise your files into directories: named containers that group related files and sub-directories together. However, *the file system provided by MicroPython is a flat file system*. A flat file system does not have directories - all your files are just stored in the same place."
msgstr "Niektoré súborové systémy (napríklad ti, čo máte v notebooku či počítači) umožňujú organizovať súbory do adresárov: pomenovaných kontajnerov, ktoré uchovávajú príbuzné súbory a tiež podadresáre. Avšak, *súborový systém MicroPythonu je plochý súborový systém*. Plochý (flat) súborový systém nemá adresáre - všetky súbory sú uložené na jednom mieste."

#: ../../tutorials/storage.rst:36
msgid "The Python programming language contains easy to use and powerful ways in which to work with a computer's file system. MicroPython on the micro:bit implements a useful subset of these features to make it easy to read and write files on the device, while also providing consistency with other versions of Python."
msgstr "Programovací jazyk Python obsahuje jednoduché, no výkonné nástroje na prácu so súborovým systémom na počítači. MicroPython na micro:bite implementuje užitočnú podmnožinu týchto nástrojov, aby bolo možné jednoducho čítať a zapisovať súbory na zariadenie, no stále zachovať kompatibilitu s inými verziami Pythonu."

#: ../../tutorials/storage.rst:43
msgid "Flashing your micro:bit will DESTROY ALL YOUR DATA since it re-writes all the flash memory used by the device and the file system is stored in the flash memory."
msgstr "Flashovanie micro:bitu ZNIČÍ VŠETKY DÁTA, keďže sa pri tom prepíše celá flash pamäť, ktorú zariadenie používa a súborový systém je uložený vo flash pamäti."

#: ../../tutorials/storage.rst:47
msgid "However, if you switch off your device the data will remain intact until you either delete it or re-flash the device."
msgstr "No ak vypneš zariadenie, dáta ostanú nedotknuté, až kým ich nezmažeš, alebo neflashneš zariadenie."

#: ../../tutorials/storage.rst:51
msgid "Open Sesame"
msgstr "Sezam, otvor sa"

#: ../../tutorials/storage.rst:53
msgid "Reading and writing a file on the file system is achieved by the ``open`` function. Once a file is opened you can do stuff with it until you close it (analogous with the way we use paper files). It is essential you close a file so MicroPython knows you've finished with it."
msgstr "Čítanie a zapisovanie súborov do súborového systéme urobíme pomocou funkcie ``open``. Keď už máš súbor otvorený, môžeš s ním robiť rôzne veci, až kým ho nezatvoríš (rovnako ako pri papierovej forme). Je veľmi dôležité, aby si súbor zatvoril(a), aby MicroPython vedel, že si s ním už po skončil(a)."

#: ../../tutorials/storage.rst:58
msgid "The best way to make sure of this is to use the ``with`` statement like this::"
msgstr "Toto najlepšie dosiahneme pomocou výrazu ``with``, takto::"

#: ../../tutorials/storage.rst:64
msgid "The ``with`` statement uses the ``open`` function to open a file and assign it to an object. In the example above, the ``open`` function opens the file called ``story.txt`` (obviously a text file containing a story of some sort). The object that's used to represent the file in the Python code is called ``my_file``. Subsequently, in the code block indented underneath the ``with`` statement, the ``my_file`` object is used to ``read()`` the content of the file and assign it to the ``content`` object."
msgstr "Výraz ``with`` použije funkciu ``open``, aby s ňou otvoril súbor a priradil ho nejakému objektu. V príklade vyššie, funkcia ``open`` otvára súbor s názvom ``story.txt`` (podľa názvu zrejme textový súbor, ktorý obsahuje nejaký príbeh - story). Objekt, ktorý reprezentuje tento súbor v Pythone sa volá ``my_file``. Následne, v bloku kódu odsadenom pod výrazom ``with`` sa používa  objekt ``my_file`` na čítanie obsahu súboru a priradenie ``obsahu`` k objektu."

#: ../../tutorials/storage.rst:72
msgid "Here's the important point, *the next line containing the* ``print`` *statement is not indented*. The code block associated with the ``with`` statement is only the single line that reads the file. Once the code block associated with the ``with`` statement is closed then Python (and MicroPython) will automatically close the file for you. This is called context handling and the ``open`` function creates objects that are context handlers for files."
msgstr "A teraz dôležitá poznámka: *nasledujúci riadok, ktorý obsahuje výraz* ``print``, *nie je odsadený*. Blok kódu spojený s výrazom ``with`` je iba ten jeden riadok, ktorý načíta obsah súboru. Keď sa blok spojený s ``with`` skončí, potom Python (a aj MicroPython) automaticky zatvorí súbor. Toto sa nazýva spracovanie kontextu (context handling) a funkcia ``open`` vytvára objekty, ktoré sú context handlermi pre súbory."

#: ../../tutorials/storage.rst:79
msgid "Put simply, the scope of your interaction with a file is defined by the code block associated with the ``with`` statement that opens the file."
msgstr "Jednoducho povedané, rozsah tvojej interakcie so súborom definuje blok kódu spojený s výrazom ``with``, ktorý otvára súbor."

#: ../../tutorials/storage.rst:82
msgid "Confused?"
msgstr "Zmätený/á?"

#: ../../tutorials/storage.rst:84
msgid "Don't be. I'm simply saying your code should look like this::"
msgstr "Nebuď. Tvoj kód má jednoducho vyzerať takto:"

#: ../../tutorials/storage.rst:93
msgid "Just like a paper file, a digital file is opened for two reasons: to read its content (as demonstrated above) or to write something to the file. The default mode is to read the file. If you want to write to a file you need to tell the ``open`` function in the following way::"
msgstr "Rovnako ako papierová zložka, digitálny súbor sa otvára z dvoch dôvodov: kvôli čítaniu jeho obsahu (ako sme si ukázali vyššie) alebo kvôli zápisu.Predvolený mód je čítanie súboru. Ak chceš do súboru zapisovať, musíš to funkcii ``open`` povedať takto::"

#: ../../tutorials/storage.rst:101
msgid "Notice the ``'w'`` argument is used to set the ``my_file`` object into write mode. You could also pass an ``'r'`` argument to set the file object to read mode, but since this is the default, it's often left off."
msgstr "Všimni si argument ``'w'``, ktorý použijeme, aby sme nastavili objekt ``my_file`` do zapisovacieho módu. Môžeš tam tiež nastaviť argument ``'r'``, ak chceš nastaviť súbor do módu na čítanie, ale keďže to je predvolená hodnota, často sa vynecháva."

#: ../../tutorials/storage.rst:105
msgid "Writing data to the file is done with the (you guessed it) ``write`` method that takes the string you want to write to the file as an argument. In the example above, I write the text \"Hello, World!\" to a file called \"hello.txt\"."
msgstr "Zápis dát do súboru sa robí pomocou metódy ``write`` , ktorá ako argument potrebuje reťazec, ktorý chceš zapísať do súboru. V príklade vyššie zapisujem text \"Hello, World!\" do súboru s názvom \"hello.txt\"."

#: ../../tutorials/storage.rst:110
msgid "Simple!"
msgstr "Jednoduché!"

#: ../../tutorials/storage.rst:114
msgid "When you open a file and write (perhaps several times while the file is in an open state) you will be writing OVER the content of the file if it already exists."
msgstr "Keď otvoríš súbor a zapíšeš doň (možno aj viackrát, kým je súbor otvorený), budeš stále prepisovať jeho obsah, ak už súbor existuje."

#: ../../tutorials/storage.rst:118
msgid "If you want to append data to a file you should first read it, store the content somewhere, close it, append your data to the content and then open it to write again with the revised content."
msgstr "Ak chceš len pridať dáta do súboru, najskôr ho musíš prečítať, odložiť si niekam jeho obsah, zatvoriť, pridať dáta do obsahu, potom ho otvoriť a nakoniec zapísať upravený obsah."

#: ../../tutorials/storage.rst:122
msgid "While this is the case in MicroPython, \"normal\" Python can open files to write in \"append\" mode. That we can't do this on the micro:bit is a result of the simple implementation of the file system."
msgstr "Toto platí pre MicroPython, \"normálny\" Python vie otvárať súbory aj v móde na dopĺňanie (\"append\"). To, že na micro:bite to urobiť nevieme, je dôsledok jednduchej implementácie súborového systému."

#: ../../tutorials/storage.rst:127
msgid "OS SOS"
msgstr "OS SOS"

#: ../../tutorials/storage.rst:129
msgid "As well as reading and writing files, Python can manipulate them. You certainly need to know what files are on the file system and sometimes you need to delete them too."
msgstr "Tak ako čítať a písať, Python vie so súbormi aj manipulovať. Určite niekedy potrebuješ vedieť, kde sa súbory nachádzajú a niekedy ich dokonca potrebuješ aj zmazať."

#: ../../tutorials/storage.rst:133
msgid "On a regular computer, it is the role of the operating system (like Windows, OSX or Linux) to manage this on Python's behalf. Such functionality is made available in Python via a module called ``os``. Since MicroPython **is** the operating system we've decided to keep the appropriate functions in the ``os`` module for consistency so you'll know where to find them when you use \"regular\" Python on a device like a laptop or Raspberry Pi."
msgstr "Na bežnom počítači je toto úlohou operačného systému (ako napríklad Windows, OSX alebo Linux), ktorý to urobia za Python. Takáto funkcionalita sa v Pythone zabezpečuje pomocou modulu, ktorý sa volá ``os``. Keďže MicroPython **je** operačný systém, rozhodli sme sa pre konzistentnosť zachovať tieto funkcie v module ``os``, takže nabudúce, keď budeš používať \"normálny\" Python na zariadení ako notebook alebo Raspberry Pi, budeš vedieť, kde ich nájdeš."

#: ../../tutorials/storage.rst:140
msgid "Essentially, you can do three operations related to the file system: list the files, remove a file and ask for the size of a file."
msgstr "Čo je dôležité, na súborovom systéme môžeš robiť tri operácie: zoznam súborov, odstrániť súbor a zistiť veľkosť súboru."

#: ../../tutorials/storage.rst:143
msgid "To list the files on your file system use the ``listdir`` function. It returns a list of strings indicating the file names of the files on the file system::"
msgstr "Na zobrazenie zoznamu súborov na tvojom súborovom systéme použi funkciu ``listdir``. Jej návratovou hodnotou je zoznam reťazcov, ktoré predstavujú názvy súborov v súborovom systéme::"

#: ../../tutorials/storage.rst:150
msgid "To delete a file use the ``remove`` function. It takes a string representing the file name of the file you want to delete as an argument, like this::"
msgstr "Súbor zmažeš pomocou funkcie ``remove``. Tá ako argument potrebuje názov súboru, ktorý si želáš zmazať. Vyzerá to takto::"

#: ../../tutorials/storage.rst:156
msgid "Finally, sometimes it's useful to know how big a file is before reading from it. To achieve this use the ``size`` function. Like the ``remove`` function, it takes a string representing the file name of the file whose size you want to know. It returns an integer (whole number) telling you the number of bytes the file takes up::"
msgstr "A na záver, niekedy je užitočné vedieť, aký veľký je súbor predtým, ako z neho začneme čítať. Toto zistíme pomocou funkcie ``size``. Rovnako ako funkcia ``remove``, vezme reťazec predstavujúci názov súboru, ktorého veľkosť chceš vedieť. Vráti celé číslo (integer), ktoré hovorí, koľko bajtov súbor v pamäti zaberá::"

#: ../../tutorials/storage.rst:165
msgid "It's all very well having a file system, but what if we want to put or get files on or off the device?"
msgstr "Je to fajn mať súborový systém, ale čo ak chceme dostať súbory do alebo zo zariadenia?"

#: ../../tutorials/storage.rst:168
msgid "Just use the ``microfs`` utility!"
msgstr "Na to použi pomocný program ``microfs``!"

#: ../../tutorials/storage.rst:171
msgid "File Transfer"
msgstr "Prenos súborov"

#: ../../tutorials/storage.rst:173
msgid "If you have Python installed on the computer you use to program your BBC micro:bit then you can use a special utility called ``microfs`` (shortened to ``ufs`` when using it in the command line). Full instructions for installing and using all the features of microfs can be found `in its documentation <https://microfs.readthedocs.io>`_."
msgstr "Ak máš nainštalovaný Python na počítači, ktorý používať na programovanie micro:bitu, tak môžeš využiť špeciálny program, ktorý sa volá ``microfs`` (skrátene ``ufs`` ak používaš príkazový riadok). Kompletné inštrukcie na inštaláciu a používanie všetkých možností microfs sú k dispozícii v dokumentácii <https://microfs.readthedocs.io>`_."

#: ../../tutorials/storage.rst:179
msgid "Nevertheless it's possible to do most of the things you need with just four simple commands::"
msgstr "No ale aj tak, na väčšinu vecí, ktoré budeš potrebovať, použiješ iba štyri jednoduché príkazy::"

#: ../../tutorials/storage.rst:185
msgid "The ``ls`` sub-command lists the files on the file system (it's named after the common Unix command, ``ls``, that serves the same function)."
msgstr "Príkaz ``ls`` zobrazí zoznam súborov na súborovom systéme (volá sa rovnako ako Unixový príkaz, ktorý slúži na rovnaký účel)."

#: ../../tutorials/storage.rst:192
msgid "The ``get`` sub-command gets a file from the connected micro:bit and saves it into your current location on your computer (it's named after the ``get`` command that's part of the common file transfer protocol [FTP] that serves the same function)."
msgstr "Príkaz ``get`` zoberie súbor z pripojeného micro:bitu a uloží ho do tvojho aktuálneho adresára na počítači (príkaz je pomenovaný rovnako ako príkaz ``get``, ktorý je súčasťou protokolu na prenos súborov FTP a ktorý má rovnakú funkciu)."

#: ../../tutorials/storage.rst:201
msgid "The ``rm`` sub-command removes the named file from the file system on the connected micro:bit (it's named after the common Unix command, ``rm``, that serves the same function)."
msgstr "Príkaz ``rm`` odstraňuje označený súbor zo súborového systému na pripojenom micro:bite (je pomenovaný po štandardnom Unixovom príkaze, ``rm``, ktorý slúži tiež na mazanie súborov)."

#: ../../tutorials/storage.rst:209
msgid "A nakoniec, príkaz ``put`` ukladá súbor z tvojho počítača na pripojené zariadenie (je pomenovaný po príkaze ``put``, ktorý je súčasťou protokolu FTP a slúži na rovnaký účel)."
msgstr ""

#: ../../tutorials/storage.rst:214
msgid "Mainly main.py"
msgstr "Hlavne main.py"

#: ../../tutorials/storage.rst:216
msgid "The file system also has an interesting property: if you just flashed the MicroPython runtime onto the device then when it starts it's simply waiting for something to do. However, if you copy a special file called ``main.py`` onto the file system, upon restarting the device, MicroPython will run the contents of the ``main.py`` file."
msgstr "Súborový systém má tiež zaujímavú vlastnosť: ak na zariadenie naflashuješ iba MicroPython, tak po zapnutí bude zariadenie čakať, čo má robiť. No ak nakopíruješ do súborového systému špeciálny súbor s názvom ``main.py`` (main = hlavný), potom po reštare zariadenia MicroPython spustí obsah tohto súboru."

#: ../../tutorials/storage.rst:222
msgid "Furthermore, if you copy other Python files onto the file system then you can ``import`` them as you would any other Python module. For example, if you had a ``hello.py`` file that contained the following simple code::"
msgstr "Navyše, ak nakopíruješ ďalšie Pythonské súbory na súborový systém, potom ich môže ``import``ovať tak, ako hocijaký iný Pythonský modul. Napríklad, ak máš súbor ``hello.py``, ktorý obsahuje tento jednoduchý kód::"

#: ../../tutorials/storage.rst:229
msgid "...you could import and use the ``say_hello`` function like this::"
msgstr "... môžeš ho naimportovať a takto použiť funkciu ``say_hello``::"

#: ../../tutorials/storage.rst:236
msgid "Of course, it results in the text \"Hello, World!\" scrolling across the display. The important point is that such an example is split between two Python modules and the ``import`` statement is used to share code."
msgstr "Samozrejme, výsledkom je text \"Hello, World!\", ktorý sa posúva po displeji. Dôležitým bodom je, že tento príklad bol rozdelený do dvoch Pythonských modulov a použili sme výraz ``import`` na zdieľanie kódu."

#: ../../tutorials/storage.rst:241
msgid "If you have flashed a script onto the device in addition to the MicroPython runtime, then MicroPython will ignore ``main.py`` and run your embedded script instead."
msgstr "Ak si okrem samotného MicroPythonu naflashoval na zariadenie aj ďalší skript, potom MicroPython odignoruje ``main.py`` a namiesto neho spustí tvoj vložený skript."

#: ../../tutorials/storage.rst:245
msgid "To flash just the MicroPython runtime, simply make sure the script you may have written in your editor has zero characters in it. Once flashed you'll be able to copy over a ``main.py`` file."
msgstr "Ak chceš naflashovať iba samotný MicroPython, tak sa len uisti, že skript, ktorý si napísal(a) vo svojom editore má nula znakov. Po naflashovaní ho budeš môcť nahradiť nakopírovaním súboru ``main.py``."

